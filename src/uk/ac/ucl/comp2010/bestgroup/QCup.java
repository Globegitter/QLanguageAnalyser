
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 18 10:28:53 GMT 2013
//----------------------------------------------------

package uk.ac.ucl.comp2010.bestgroup;

import java_cup.runtime.*;
import uk.ac.ucl.comp2010.bestgroup.AST.*;
import java.util.LinkedList;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 18 10:28:53 GMT 2013
  */
public class QCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public QCup() {super();}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\010\000" +
    "\002\006\006\000\002\014\003\000\002\014\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\014\000\002\012" +
    "\007\000\002\012\005\000\002\011\003\000\002\011\002" +
    "\000\002\013\007\000\002\020\002\000\002\020\006\000" +
    "\002\020\006\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\005\000\002\020\006\000" +
    "\002\020\007\000\002\020\007\000\002\020\010\000\002" +
    "\020\005\000\002\020\003\000\002\015\005\000\002\015" +
    "\002\000\002\016\005\000\002\017\005\000\002\022\004" +
    "\000\002\022\002\000\002\021\006\000\002\021\007\000" +
    "\002\021\015\000\002\021\011\000\002\021\012\000\002" +
    "\021\013\000\002\021\005\000\002\021\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\012\004\012\025\ufffd\031\013\032\010\001" +
    "\002\000\004\025\237\001\002\000\024\004\ufffc\025\ufffc" +
    "\026\ufffc\031\ufffc\032\ufffc\034\ufffc\035\ufffc\037\ufffc\041" +
    "\ufffc\001\002\000\024\004\012\025\ufffd\026\ufffd\031\013" +
    "\032\010\034\ufffd\035\ufffd\037\ufffd\041\ufffd\001\002\000" +
    "\004\002\235\001\002\000\004\004\146\001\002\000\024" +
    "\004\ufffb\025\ufffb\026\ufffb\031\ufffb\032\ufffb\034\ufffb\035" +
    "\ufffb\037\ufffb\041\ufffb\001\002\000\004\016\031\001\002" +
    "\000\004\004\015\001\002\000\024\004\ufffa\025\ufffa\026" +
    "\ufffa\031\ufffa\032\ufffa\034\ufffa\035\ufffa\037\ufffa\041\ufffa" +
    "\001\002\000\004\016\016\001\002\000\006\004\017\014" +
    "\uffef\001\002\000\004\016\023\001\002\000\004\014\022" +
    "\001\002\000\006\014\ufff0\022\ufff0\001\002\000\024\004" +
    "\uffee\025\uffee\026\uffee\031\uffee\032\uffee\034\uffee\035\uffee" +
    "\037\uffee\041\uffee\001\002\000\006\005\026\006\024\001" +
    "\002\000\014\014\ufff6\015\ufff6\022\ufff6\025\ufff6\056\ufff6" +
    "\001\002\000\010\014\ufff1\015\027\022\ufff1\001\002\000" +
    "\014\014\ufff7\015\ufff7\022\ufff7\025\ufff7\056\ufff7\001\002" +
    "\000\004\004\017\001\002\000\006\014\ufff2\022\ufff2\001" +
    "\002\000\006\005\026\006\024\001\002\000\006\014\033" +
    "\056\034\001\002\000\024\004\ufff8\025\ufff8\026\ufff8\031" +
    "\ufff8\032\ufff8\034\ufff8\035\ufff8\037\ufff8\041\ufff8\001\002" +
    "\000\066\004\045\007\040\010\036\011\053\012\052\013" +
    "\042\014\uffed\017\uffed\021\041\023\044\027\051\043\uffed" +
    "\044\037\045\uffed\046\035\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\001\002\000\076\004\045\007\040\010\036\011" +
    "\053\012\052\013\042\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\021\041\022\uffed\023\044\024\uffed\027\051\043\uffed\044" +
    "\037\045\uffed\046\035\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\050\055\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\001\002\000\050\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\022\uffe8\024\uffe8\043\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\001\002\000\004\021\142\001\002\000" +
    "\050\014\uffdb\015\uffdb\016\uffdb\017\uffdb\022\uffdb\024\uffdb" +
    "\043\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\055\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\001\002\000\066\004\045\007\040\010\036\011\053\012" +
    "\052\013\042\017\uffed\021\041\022\uffed\023\044\027\051" +
    "\043\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\001\002\000\050\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\022\uffd7\024\uffd7\043\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\001\002\000\050\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\022\uffd6\024\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\055\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\001\002\000" +
    "\070\004\045\007\040\010\036\011\053\012\052\013\042" +
    "\015\uffed\017\uffed\021\041\023\044\024\uffcb\027\051\043" +
    "\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\001\002\000\056\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\121\021\117\022\uffcd\023\120\024\uffcd\043" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\055\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\001" +
    "\002\000\050\014\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5" +
    "\024\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\055\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\001\002\000\040\014\116\017\066\043\063\045" +
    "\067\046\057\047\073\050\061\051\072\052\060\053\074" +
    "\055\065\057\070\060\064\061\062\062\056\001\002\000" +
    "\076\004\045\007\040\010\036\011\053\012\052\013\042" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\021\041\022\uffed\023" +
    "\044\024\uffed\027\051\043\uffed\044\037\045\uffed\046\035" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\050\055" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001\002\000\070" +
    "\004\045\007\040\010\036\011\053\012\052\013\042\015" +
    "\uffed\017\uffed\021\041\023\044\027\051\030\uffcb\043\uffed" +
    "\044\037\045\uffed\046\035\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\001\002\000\050\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\022\uffd4\024\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\001\002\000\050\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\022\uffe7\024\uffe7\043\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\001\002\000\004\030" +
    "\114\001\002\000\040\015\071\017\066\043\063\045\067" +
    "\046\057\047\073\050\061\051\072\052\060\053\074\055" +
    "\065\057\070\060\064\061\062\062\056\001\002\000\076" +
    "\004\045\007\040\010\036\011\053\012\052\013\042\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\021\041\022\uffed\023\044" +
    "\024\uffed\027\051\043\uffed\044\037\045\uffed\046\035\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\050\055\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\001\002\000\076\004" +
    "\045\007\040\010\036\011\053\012\052\013\042\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\021\041\022\uffed\023\044\024" +
    "\uffed\027\051\043\uffed\044\037\045\uffed\046\035\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\001\002\000\076\004\045" +
    "\007\040\010\036\011\053\012\052\013\042\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\021\041\022\uffed\023\044\024\uffed" +
    "\027\051\043\uffed\044\037\045\uffed\046\035\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed" +
    "\060\uffed\061\uffed\062\uffed\001\002\000\076\004\045\007" +
    "\040\010\036\011\053\012\052\013\042\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\021\041\022\uffed\023\044\024\uffed\027" +
    "\051\043\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\001\002\000\076\004\045\007\040" +
    "\010\036\011\053\012\052\013\042\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\021\041\022\uffed\023\044\024\uffed\027\051" +
    "\043\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\001\002\000\076\004\045\007\040\010" +
    "\036\011\053\012\052\013\042\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\021\041\022\uffed\023\044\024\uffed\027\051\043" +
    "\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\001\002\000\076\004\045\007\040\010\036" +
    "\011\053\012\052\013\042\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\021\041\022\uffed\023\044\024\uffed\027\051\043\uffed" +
    "\044\037\045\uffed\046\035\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\001\002\000\076\004\045\007\040\010\036\011" +
    "\053\012\052\013\042\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\021\041\022\uffed\023\044\024\uffed\027\051\043\uffed\044" +
    "\037\045\uffed\046\035\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\050\055\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\001\002\000\076\004\045\007\040\010\036\011\053" +
    "\012\052\013\042\014\uffed\015\uffed\016\uffed\017\uffed\021" +
    "\041\022\uffed\023\044\024\uffed\027\051\043\uffed\044\037" +
    "\045\uffed\046\035\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\050\055\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\001\002\000\076\004\045\007\040\010\036\011\053\012" +
    "\052\013\042\014\uffed\015\uffed\016\uffed\017\uffed\021\041" +
    "\022\uffed\023\044\024\uffed\027\051\043\uffed\044\037\045" +
    "\uffed\046\035\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\050\055\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001" +
    "\002\000\076\004\045\007\040\010\036\011\053\012\052" +
    "\013\042\014\uffed\015\uffed\016\uffed\017\uffed\021\041\022" +
    "\uffed\023\044\024\uffed\027\051\043\uffed\044\037\045\uffed" +
    "\046\035\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\050\055\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001\002" +
    "\000\074\004\045\007\040\010\036\011\053\012\052\013" +
    "\042\015\uffed\017\uffed\021\041\022\uffcb\023\044\024\uffcb" +
    "\027\051\030\uffcb\043\uffed\044\037\045\uffed\046\035\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\050\055\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\001\002\000\076\004" +
    "\045\007\040\010\036\011\053\012\052\013\042\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\021\041\022\uffed\023\044\024" +
    "\uffed\027\051\043\uffed\044\037\045\uffed\046\035\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\001\002\000\076\004\045" +
    "\007\040\010\036\011\053\012\052\013\042\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\021\041\022\uffed\023\044\024\uffed" +
    "\027\051\043\uffed\044\037\045\uffed\046\035\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed" +
    "\060\uffed\061\uffed\062\uffed\001\002\000\076\004\045\007" +
    "\040\010\036\011\053\012\052\013\042\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\021\041\022\uffed\023\044\024\uffed\027" +
    "\051\043\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\001\002\000\050\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\022\uffda\024\uffda\043\uffda\045\067\046" +
    "\057\047\073\050\061\051\072\052\uffda\053\uffda\055\065" +
    "\057\070\060\064\061\062\062\056\001\002\000\050\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\022\uffe3\024\uffe3\043\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\072\052\uffe3\053" +
    "\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\001\002" +
    "\000\050\014\uffe1\015\uffe1\016\uffe1\017\uffe1\022\uffe1\024" +
    "\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\001\002\000\010\022\uffcc\024\uffcc\030\uffcc\001\002" +
    "\000\050\014\uffde\015\uffde\016\uffde\017\uffde\022\uffde\024" +
    "\uffde\043\uffde\045\067\046\057\047\073\050\061\051\072" +
    "\052\uffde\053\uffde\055\uffde\057\uffde\060\uffde\061\uffde\062" +
    "\uffde\001\002\000\050\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\022\uffe6\024\uffe6\043\uffe6\045\uffe6\046\uffe6\047\073\050" +
    "\061\051\072\052\uffe6\053\uffe6\055\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\001\002\000\050\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\022\uffd3\024\uffd3\043\uffd3\045\067\046\057" +
    "\047\073\050\061\051\072\052\060\053\074\055\065\057" +
    "\070\060\064\061\062\062\056\001\002\000\050\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\022\uffdc\024\uffdc\043\uffdc\045" +
    "\067\046\057\047\073\050\061\051\072\052\uffdc\053\uffdc" +
    "\055\uffdc\057\070\060\064\061\062\062\056\001\002\000" +
    "\050\014\uffdd\015\uffdd\016\uffdd\017\uffdd\022\uffdd\024\uffdd" +
    "\043\uffdd\045\067\046\057\047\073\050\061\051\072\052" +
    "\uffdd\053\uffdd\055\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\001\002\000\046\014\uffea\015\uffea\016\uffea\017\066\022" +
    "\uffea\024\uffea\045\067\046\057\047\073\050\061\051\072" +
    "\052\060\053\074\055\065\057\070\060\064\061\062\062" +
    "\056\001\002\000\050\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\022\uffe0\024\uffe0\043\uffe0\045\067\046\057\047\073\050" +
    "\061\051\072\052\uffe0\053\uffe0\055\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\001\002\000\050\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\022\uffe2\024\uffe2\043\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\072\052\uffe2\053\uffe2\055\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\001\002\000\050\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\022\uffd9\024\uffd9\043\uffd9\045" +
    "\067\046\057\047\073\050\061\051\072\052\uffd9\053\074" +
    "\055\065\057\070\060\064\061\062\062\056\001\002\000" +
    "\050\014\uffe5\015\uffe5\016\uffe5\017\uffe5\022\uffe5\024\uffe5" +
    "\043\uffe5\045\uffe5\046\uffe5\047\073\050\061\051\072\052" +
    "\uffe5\053\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\001\002\000\050\014\uffdf\015\uffdf\016\uffdf\017\uffdf\022" +
    "\uffdf\024\uffdf\043\uffdf\045\067\046\057\047\073\050\061" +
    "\051\072\052\uffdf\053\uffdf\055\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\001\002\000\050\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\022\uffc9\024\uffc9\043\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\001\002\000\050\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\022\uffd8\024\uffd8\043\uffd8\045\067" +
    "\046\057\047\073\050\061\051\072\052\uffd8\053\uffd8\055" +
    "\065\057\070\060\064\061\062\062\056\001\002\000\024" +
    "\004\ufff9\025\ufff9\026\ufff9\031\ufff9\032\ufff9\034\ufff9\035" +
    "\ufff9\037\ufff9\041\ufff9\001\002\000\070\004\045\007\040" +
    "\010\036\011\053\012\052\013\042\015\uffed\017\uffed\021" +
    "\041\022\uffcb\023\044\027\051\043\uffed\044\037\045\uffed" +
    "\046\035\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\050\055\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001\002" +
    "\000\070\004\045\007\040\010\036\011\053\012\052\013" +
    "\042\016\123\017\uffed\021\041\023\044\024\uffed\027\051" +
    "\043\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\001\002\000\004\004\122\001\002\000" +
    "\050\014\uffce\015\uffce\016\uffce\017\uffce\022\uffce\024\uffce" +
    "\043\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052" +
    "\uffce\053\uffce\055\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\001\002\000\066\004\045\007\040\010\036\011\053\012" +
    "\052\013\042\017\uffed\021\041\023\044\024\uffed\027\051" +
    "\043\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\001\002\000\042\016\125\017\066\024" +
    "\126\043\063\045\067\046\057\047\073\050\061\051\072" +
    "\052\060\053\074\055\065\057\070\060\064\061\062\062" +
    "\056\001\002\000\066\004\045\007\040\010\036\011\053" +
    "\012\052\013\042\017\uffed\021\041\023\044\024\127\027" +
    "\051\043\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\001\002\000\050\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\022\uffd2\024\uffd2\043\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\001\002\000\050\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\022\uffd1\024\uffd1\043\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\001\002" +
    "\000\040\017\066\024\131\043\063\045\067\046\057\047" +
    "\073\050\061\051\072\052\060\053\074\055\065\057\070" +
    "\060\064\061\062\062\056\001\002\000\050\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\022\uffcf\024\uffcf\043\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\055" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\001\002\000\040" +
    "\017\066\024\133\043\063\045\067\046\057\047\073\050" +
    "\061\051\072\052\060\053\074\055\065\057\070\060\064" +
    "\061\062\062\056\001\002\000\050\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\022\uffd0\024\uffd0\043\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\055\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\062\uffd0\001\002\000\004\022\135" +
    "\001\002\000\050\014\uffec\015\uffec\016\uffec\017\uffec\022" +
    "\uffec\024\uffec\043\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\055\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\001\002\000\004\024\137\001\002\000\050" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\022\uffca\024\uffca\043" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\053\uffca\055\uffca\057\uffca\060\uffca\061\uffca\062\uffca\001" +
    "\002\000\040\017\066\022\141\043\063\045\067\046\057" +
    "\047\073\050\061\051\072\052\060\053\074\055\065\057" +
    "\070\060\064\061\062\062\056\001\002\000\050\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\022\uffe9\024\uffe9\043\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\055\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\001\002\000" +
    "\004\004\143\001\002\000\004\022\144\001\002\000\050" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\022\uffeb\024\uffeb\043" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\055\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001" +
    "\002\000\050\014\uffe4\015\uffe4\016\uffe4\017\uffe4\022\uffe4" +
    "\024\uffe4\043\uffe4\045\uffe4\046\uffe4\047\073\050\061\051" +
    "\072\052\uffe4\053\uffe4\055\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\001\002\000\004\021\147\001\002\000\006\004" +
    "\017\022\uffef\001\002\000\004\022\151\001\002\000\004" +
    "\016\152\001\002\000\010\005\026\006\024\033\155\001" +
    "\002\000\004\025\156\001\002\000\004\025\ufff5\001\002" +
    "\000\004\025\ufff4\001\002\000\022\004\012\026\ufffd\031" +
    "\013\032\010\034\ufffd\035\ufffd\037\ufffd\041\ufffd\001\002" +
    "\000\016\004\162\026\uffc7\034\163\035\167\037\166\041" +
    "\164\001\002\000\004\026\161\001\002\000\024\004\ufff3" +
    "\025\ufff3\026\ufff3\031\ufff3\032\ufff3\034\ufff3\035\ufff3\037" +
    "\ufff3\041\ufff3\001\002\000\006\021\227\056\226\001\002" +
    "\000\066\004\045\007\040\010\036\011\053\012\052\013" +
    "\042\014\223\017\uffed\021\041\023\044\027\051\043\uffed" +
    "\044\037\045\uffed\046\035\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\001\002\000\004\025\213\001\002\000\016\004" +
    "\162\026\uffc7\034\163\035\167\037\166\041\164\001\002" +
    "\000\004\021\203\001\002\000\004\021\171\001\002\000" +
    "\004\026\uffff\001\002\000\066\004\045\007\040\010\036" +
    "\011\053\012\052\013\042\017\uffed\021\041\022\uffed\023" +
    "\044\027\051\043\uffed\044\037\045\uffed\046\035\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\001\002\000\040\017\066" +
    "\022\173\043\063\045\067\046\057\047\073\050\061\051" +
    "\072\052\060\053\074\055\065\057\070\060\064\061\062" +
    "\062\056\001\002\000\004\025\174\001\002\000\016\004" +
    "\162\026\uffc7\034\163\035\167\037\166\041\164\001\002" +
    "\000\004\026\176\001\002\000\020\004\uffc3\026\uffc3\034" +
    "\uffc3\035\uffc3\036\177\037\uffc3\041\uffc3\001\002\000\004" +
    "\025\200\001\002\000\016\004\162\026\uffc7\034\163\035" +
    "\167\037\166\041\164\001\002\000\004\026\202\001\002" +
    "\000\016\004\uffc4\026\uffc4\034\uffc4\035\uffc4\037\uffc4\041" +
    "\uffc4\001\002\000\066\004\045\007\040\010\036\011\053" +
    "\012\052\013\042\017\uffed\021\041\022\uffed\023\044\027" +
    "\051\043\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\001\002\000\040\017\066\022\205" +
    "\043\063\045\067\046\057\047\073\050\061\051\072\052" +
    "\060\053\074\055\065\057\070\060\064\061\062\062\056" +
    "\001\002\000\004\040\206\001\002\000\004\025\207\001" +
    "\002\000\016\004\162\026\uffc7\034\163\035\167\037\166" +
    "\041\164\001\002\000\004\026\211\001\002\000\016\004" +
    "\uffc2\026\uffc2\034\uffc2\035\uffc2\037\uffc2\041\uffc2\001\002" +
    "\000\004\026\uffc8\001\002\000\016\004\162\026\uffc7\034" +
    "\163\035\167\037\166\041\164\001\002\000\004\026\215" +
    "\001\002\000\004\042\216\001\002\000\004\021\217\001" +
    "\002\000\066\004\045\007\040\010\036\011\053\012\052" +
    "\013\042\017\uffed\021\041\022\uffed\023\044\027\051\043" +
    "\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\001\002\000\040\017\066\022\221\043\063" +
    "\045\067\046\057\047\073\050\061\051\072\052\060\053" +
    "\074\055\065\057\070\060\064\061\062\062\056\001\002" +
    "\000\004\014\222\001\002\000\016\004\uffc1\026\uffc1\034" +
    "\uffc1\035\uffc1\037\uffc1\041\uffc1\001\002\000\016\004\uffbf" +
    "\026\uffbf\034\uffbf\035\uffbf\037\uffbf\041\uffbf\001\002\000" +
    "\040\014\225\017\066\043\063\045\067\046\057\047\073" +
    "\050\061\051\072\052\060\053\074\055\065\057\070\060" +
    "\064\061\062\062\056\001\002\000\016\004\uffc0\026\uffc0" +
    "\034\uffc0\035\uffc0\037\uffc0\041\uffc0\001\002\000\066\004" +
    "\045\007\040\010\036\011\053\012\052\013\042\014\uffed" +
    "\017\uffed\021\041\023\044\027\051\043\uffed\044\037\045" +
    "\uffed\046\035\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\050\055\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001" +
    "\002\000\070\004\045\007\040\010\036\011\053\012\052" +
    "\013\042\015\uffed\017\uffed\021\041\022\uffcb\023\044\027" +
    "\051\043\uffed\044\037\045\uffed\046\035\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\050\055\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\001\002\000\004\022\231\001\002" +
    "\000\004\014\232\001\002\000\016\004\uffc5\026\uffc5\034" +
    "\uffc5\035\uffc5\037\uffc5\041\uffc5\001\002\000\040\014\234" +
    "\017\066\043\063\045\067\046\057\047\073\050\061\051" +
    "\072\052\060\053\074\055\065\057\070\060\064\061\062" +
    "\062\056\001\002\000\016\004\uffc6\026\uffc6\034\uffc6\035" +
    "\uffc6\037\uffc6\041\uffc6\001\002\000\004\002\000\001\002" +
    "\000\020\004\ufffe\025\ufffe\026\ufffe\034\ufffe\035\ufffe\037" +
    "\ufffe\041\ufffe\001\002\000\022\004\012\026\ufffd\031\013" +
    "\032\010\034\ufffd\035\ufffd\037\ufffd\041\ufffd\001\002\000" +
    "\004\026\241\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\016\002\006\004\003\005\005\006\004\010" +
    "\010\013\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\235\005\005\006\004\010\010\013\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\017\012\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\027\001\001\000" +
    "\002\001\001\000\004\014\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\042\017\045\020\046\001" +
    "\001\000\010\016\042\017\045\020\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\042\017\045\020\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\135\016\042\017\045\020\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\042\017\045\020\114\001\001\000\012\015" +
    "\053\016\042\017\045\020\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\042\017\045\020\112\001\001\000\010\016\042" +
    "\017\045\020\111\001\001\000\010\016\042\017\045\020" +
    "\110\001\001\000\010\016\042\017\045\020\107\001\001" +
    "\000\010\016\042\017\045\020\106\001\001\000\010\016" +
    "\042\017\045\020\105\001\001\000\010\016\042\017\045" +
    "\020\104\001\001\000\010\016\042\017\045\020\103\001" +
    "\001\000\010\016\042\017\045\020\102\001\001\000\010" +
    "\016\042\017\045\020\101\001\001\000\010\016\042\017" +
    "\045\020\100\001\001\000\012\015\077\016\042\017\045" +
    "\020\054\001\001\000\010\016\042\017\045\020\076\001" +
    "\001\000\010\016\042\017\045\020\075\001\001\000\010" +
    "\016\042\017\045\020\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\133\016\042\017\045\020\054\001" +
    "\001\000\010\016\042\017\045\020\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\042\017\045\020" +
    "\131\001\001\000\002\001\001\000\010\016\042\017\045" +
    "\020\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\147\012\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\152\014\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\157\004\156\005\005\006" +
    "\004\010\010\013\013\001\001\000\006\021\164\022\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\042\017\045\020\223\001\001\000\002" +
    "\001\001\000\006\021\164\022\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\042" +
    "\017\045\020\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\164\022\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\164\022" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\042\017\045\020\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\164\022\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\164\022\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\042\017" +
    "\045\020\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\042\017\045\020\232\001\001" +
    "\000\012\015\227\016\042\017\045\020\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\237\004\156\005\005\006\004\010\010" +
    "\013\013\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public int errs = 0;
	public void syntax_error(Symbol cur_token) {
		report_error("Error parsing token type '" + getTokenName(cur_token) + "' at line " + (cur_token.left+1) + ", character " + (cur_token.right+1) + ":", cur_token);
		errs ++;
	}
	
	public String getTokenName(Symbol cur_token) {
		Field[] tokenFields = QSym.class.getFields();
		for(Field field: tokenFields) {
			try{
				if(cur_token.sym == (int) field.get(QSym.class)) {
					return field.getName();
				}
			} catch (IllegalAccessException e) {}
		}
		return "";
	}	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$QCup$actions {


		
	public void err(String msg) {
		System.err.println("Error in " + getSection() + ": " + msg);
	}
	
	public String getSection() {
		return ((QLex) parser.getScanner()).section;
	}
	
	public void setSection(String value) {
		((QLex) parser.getScanner()).section = value;
	}
	
	public boolean addType(String type) {
		return ((QLex) parser.getScanner()).addType(type);
	}
	
	public boolean isType(String type) {
		return ((QLex) parser.getScanner()).isType(type);
	}

  private final QCup parser;

  /** Constructor */
  CUP$QCup$actions(QCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$QCup$do_action(
    int                        CUP$QCup$act_num,
    java_cup.runtime.lr_parser CUP$QCup$parser,
    java.util.Stack            CUP$QCup$stack,
    int                        CUP$QCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QCup$result;

      /* select the action based on the action number */
      switch (CUP$QCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= RETURN SEMICOLON 
            {
              StatementNode RESULT =null;
		 RESULT = new ReturnNode(null); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= RETURN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ReturnNode(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= REPEAT CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE UNTIL BRACKETOPEN expr BRACKETCLOSE SEMICOLON 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		LinkedList<StatementNode> s = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		 RESULT = new RepeatNode(s, c); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= WHILE BRACKETOPEN expr BRACKETCLOSE DO CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> s = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new WhileNode(c, s); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-7)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= IF BRACKETOPEN expr BRACKETCLOSE CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> t = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IfNode(c, t); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= IF BRACKETOPEN expr BRACKETCLOSE CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE ELSE CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		LinkedList<StatementNode> t = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> f = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IfNode(c, t, f); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-10)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= ID BRACKETOPEN exprlist BRACKETCLOSE SEMICOLON 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		LinkedList<ExprNode> args = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		 RESULT = new FunctionCallStatementNode( new FunctionCallNode(id, args)); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= ID EQUALS expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode v = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new AssignmentNode(id,v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statementlist ::= 
            {
              LinkedList<StatementNode> RESULT =null;
		 RESULT = new LinkedList<StatementNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementlist",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statementlist ::= statement statementlist 
            {
              LinkedList<StatementNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<StatementNode> r = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 r.addFirst(s); RESULT = r; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementlist",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tuple ::= TUPLELEFT exprlist TUPLERIGHT 
            {
              TupleNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> l = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new TupleNode(l); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tuple",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list ::= SQUAREBRACKETOPEN exprlist SQUAREBRACKETCLOSE 
            {
              ListNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> l = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ListNode(l); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("list",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprlist ::= 
            {
              LinkedList<ExprNode> RESULT =null;
		 RESULT = new LinkedList<ExprNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprlist ::= expr COMMA exprlist 
            {
              LinkedList<ExprNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ExprNode> r = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 r.addFirst(e); RESULT = r; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= ID 
            {
              ExprNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new VarExprNode(var); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= ID DOT ID 
            {
              ExprNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new FieldNode(var, field); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= ID SQUAREBRACKETOPEN expr COLON expr SQUAREBRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode j = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IndexRangeNode(id, i, j); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= ID SQUAREBRACKETOPEN COLON expr SQUAREBRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode j = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IndexRangeNode(id, null, j); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= ID SQUAREBRACKETOPEN expr COLON SQUAREBRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		 RESULT = new IndexRangeNode(id, i, null); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= ID SQUAREBRACKETOPEN expr SQUAREBRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IndexNode(id, i); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr CONCAT expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ConcatNode(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= CHAR 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new CharNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= tuple 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		TupleNode v = (TupleNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= list 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ListNode v = (ListNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= STRING 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new StringNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= NOT expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NotNode(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr AND expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new AndNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr OR expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new OrNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= BOOL 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new BoolNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr EQUALSCOMPARISON expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new EqualsNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr GREATER expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new GreaterNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr LESS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new LessNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr GREATEREQUALS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new GreaterEqualsNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr LESSEQUALS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new LessEqualsNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr POWER expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new PowerNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr DIVIDE expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new DivideNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr TIMES expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new TimesNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= MINUS expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NegativeNode(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MINUS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new MinusNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr PLUS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new PlusNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= FLOAT 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		float v = (float)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new FloatNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= INT 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IntNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= BRACKETOPEN expr BRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr IN expr 
            {
              ExprNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode n = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode h = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new InNode(n, h); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= LEN BRACKETOPEN ID BRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new LengthNode(id); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= ID BRACKETOPEN exprlist BRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> args = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FunctionCallNode(id, args); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= 
            {
              ExprNode RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tdef ::= TDEF ID COLON arglist SEMICOLON 
            {
              TDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ArgNode> fields = (LinkedList<ArgNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 if(addType(id)) { RESULT = new TDefNode(id, fields); } else { err("Cannot declare type \"" + id + "\". Already exists?"); } 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tdef",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arglist ::= 
            {
              LinkedList<ArgNode> RESULT =null;
		RESULT = new LinkedList<ArgNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("arglist",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arglist ::= nonemptyarglist 
            {
              LinkedList<ArgNode> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ArgNode> args = (LinkedList<ArgNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = args; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("arglist",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nonemptyarglist ::= ID COLON type 
            {
              LinkedList<ArgNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new LinkedList<ArgNode>(); RESULT.addFirst(new ArgNode(id,t)); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("nonemptyarglist",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nonemptyarglist ::= ID COLON type COMMA nonemptyarglist 
            {
              LinkedList<ArgNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ArgNode> r = (LinkedList<ArgNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 r.addFirst(new ArgNode(id,t)); RESULT = r; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("nonemptyarglist",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fdef ::= FDEF ID BRACKETOPEN arglist BRACKETCLOSE COLON ftype CURLYBRACKETOPEN body CURLYBRACKETCLOSE 
            {
              FDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		LinkedList<ArgNode> args = (LinkedList<ArgNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		BodyNode b = (BodyNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FDefNode(id, args, t, b); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fdef",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-9)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ftype ::= VOID 
            {
              String RESULT =null;
		 RESULT = "void"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ftype",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ftype ::= type 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = t; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ftype",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= CUSTOMTYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = t; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = t; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vardef ::= ID COLON type SEMICOLON 
            {
              VarDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new VarDefNode(id, t); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("vardef",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vardef ::= ID COLON type EQUALS expr SEMICOLON 
            {
              VarDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode v = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new VarDefNode(id, t, v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("vardef",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= tdef 
            {
              DecNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		TDefNode d = (TDefNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = d; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= fdef 
            {
              DecNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		FDefNode d = (FDefNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = d; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= vardef 
            {
              DecNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		VarDefNode d = (VarDefNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = d; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declist ::= 
            {
              LinkedList<DecNode> RESULT =null;
		 RESULT = new LinkedList<DecNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declist",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declist ::= dec declist 
            {
              LinkedList<DecNode> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		DecNode d = (DecNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<DecNode> r = (LinkedList<DecNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 r.addFirst(d); RESULT = r; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declist",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declist statementlist 
            {
              BodyNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<DecNode> d = (LinkedList<DecNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<StatementNode> s = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 setSection("Body"); RESULT = new BodyNode(d,s); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		RESULT = start_val;
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QCup$parser.done_parsing();
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declist CURLYBRACKETOPEN body CURLYBRACKETCLOSE 
            {
              ProgramNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		LinkedList<DecNode> d = (LinkedList<DecNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		BodyNode b = (BodyNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ProgramNode(d,b); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

