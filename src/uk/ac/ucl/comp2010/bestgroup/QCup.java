
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 21 14:53:58 BST 2013
//----------------------------------------------------

package uk.ac.ucl.comp2010.bestgroup;

import java_cup.runtime.*;
import uk.ac.ucl.comp2010.bestgroup.AST.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 21 14:53:58 BST 2013
  */
public class QCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public QCup() {super();}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\043\004\000\002\043\003\000\002\026\004\000\002" +
    "\026\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\004\000\002\023\012\000\002\021\005" +
    "\000\002\017\005\000\002\020\004\000\002\020\002\000" +
    "\002\031\007\000\002\022\003\000\002\022\003\000\002" +
    "\024\004\000\002\024\002\000\002\025\005\000\002\025" +
    "\002\000\002\032\006\000\002\032\005\000\002\027\004" +
    "\000\002\027\003\000\002\033\004\000\002\033\002\000" +
    "\002\034\003\000\002\034\004\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\004\000\002\036\011\000\002\035\007" +
    "\000\002\040\010\000\002\037\011\000\002\011\006\000" +
    "\002\042\005\000\002\042\004\000\002\041\006\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\003" +
    "\003\000\002\003\005\000\002\014\005\000\002\013\005" +
    "\000\002\015\004\000\002\015\002\000\002\016\005\000" +
    "\002\016\002\000\002\004\003\000\002\004\004\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\010\000\002\004\007\000\002" +
    "\004\007\000\002\004\006\000\002\005\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\006\005\000\002\006\003\000\002\007\004\000" +
    "\002\007\003\000\002\010\003\000\002\010\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\006\000\002\010\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\014\003\013\010\020\030\012\036\011\037" +
    "\014\001\002\000\014\003\ufff5\010\ufff5\030\ufff5\036\ufff5" +
    "\037\ufff5\001\002\000\014\003\ufff2\010\ufff2\030\ufff2\036" +
    "\ufff2\037\ufff2\001\002\000\014\003\ufff4\010\ufff4\030\ufff4" +
    "\036\ufff4\037\ufff4\001\002\000\004\002\ufff7\001\002\000" +
    "\004\002\270\001\002\000\004\030\257\001\002\000\004" +
    "\007\202\001\002\000\004\004\256\001\002\000\004\030" +
    "\245\001\002\000\006\004\uffec\040\242\001\002\000\014" +
    "\003\ufff3\010\ufff3\030\ufff3\036\ufff3\037\ufff3\001\002\000" +
    "\014\003\013\010\020\030\012\036\011\037\014\001\002" +
    "\000\020\003\037\011\uffdf\030\027\062\026\064\042\066" +
    "\024\070\023\001\002\000\006\006\173\040\234\001\002" +
    "\000\020\003\037\011\uffdf\030\053\062\026\064\042\066" +
    "\024\070\023\001\002\000\004\016\226\001\002\000\034" +
    "\004\223\012\070\014\050\016\073\030\053\031\056\032" +
    "\066\033\065\034\055\035\071\041\051\045\067\052\064" +
    "\001\002\000\004\004\222\001\002\000\004\016\214\001" +
    "\002\000\012\006\uffcb\007\202\016\165\040\uffcb\001\002" +
    "\000\020\003\uffe1\011\uffe1\030\uffe1\062\uffe1\064\uffe1\066" +
    "\uffe1\070\uffe1\001\002\000\004\011\201\001\002\000\020" +
    "\003\uffdc\011\uffdc\030\uffdc\062\uffdc\064\uffdc\066\uffdc\070" +
    "\uffdc\001\002\000\020\003\uffdb\011\uffdb\030\uffdb\062\uffdb" +
    "\064\uffdb\066\uffdb\070\uffdb\001\002\000\020\003\uffda\011" +
    "\uffda\030\uffda\062\uffda\064\uffda\066\uffda\070\uffda\001\002" +
    "\000\020\003\uffd9\011\uffd9\030\uffd9\062\uffd9\064\uffd9\066" +
    "\uffd9\070\uffd9\001\002\000\020\003\uffde\011\uffde\030\uffde" +
    "\062\uffde\064\uffde\066\uffde\070\uffde\001\002\000\004\004" +
    "\200\001\002\000\020\003\037\011\uffdf\030\027\062\026" +
    "\064\042\066\024\070\023\001\002\000\020\003\uffd8\011" +
    "\uffd8\030\uffd8\062\uffd8\064\uffd8\066\uffd8\070\uffd8\001\002" +
    "\000\004\010\020\001\002\000\004\065\044\001\002\000" +
    "\004\016\045\001\002\000\032\012\070\014\050\016\073" +
    "\030\053\031\056\032\066\033\065\034\055\035\071\041" +
    "\051\045\067\052\064\001\002\000\060\004\uffa9\005\uffa9" +
    "\006\173\007\uffa9\012\uffa9\013\uffa9\015\uffa9\017\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\001\002\000\056\004\uffaa\005\uffaa\007\uffaa" +
    "\012\uffaa\013\uffaa\015\uffaa\017\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\001" +
    "\002\000\034\012\070\014\050\015\uffc6\016\073\030\053" +
    "\031\056\032\066\033\065\034\055\035\071\041\051\045" +
    "\067\052\064\001\002\000\032\012\070\014\050\016\073" +
    "\030\053\031\056\032\066\033\065\034\055\035\071\041" +
    "\051\045\067\052\064\001\002\000\056\004\uffa3\005\uffa3" +
    "\007\uffa3\012\uffa3\013\uffa3\015\uffa3\017\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\001\002\000\064\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\012\uffcb\013\uffcb\015\uffcb\016\165\017\uffcb\040\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\001\002\000\056\004\uffa1\005\uffa1\007\uffa1" +
    "\012\uffa1\013\uffa1\015\uffa1\017\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\001" +
    "\002\000\056\004\uffa6\005\uffa6\007\uffa6\012\uffa6\013\uffa6" +
    "\015\uffa6\017\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\001\002\000\056\004" +
    "\uffce\005\uffce\007\uffce\012\uffce\013\uffce\015\uffce\017\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\001\002\000\034\012\076\017\163\042" +
    "\111\044\103\045\075\051\101\053\104\054\106\055\077" +
    "\056\105\057\107\060\102\061\100\001\002\000\056\004" +
    "\uffcd\005\uffcd\007\uffcd\012\uffcd\013\uffcd\015\uffcd\017\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\001\002\000\056\004\uffb2\005\uffb2\007" +
    "\uffb2\012\uffb2\013\uffb2\015\uffb2\017\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\001\002\000\056\004\uffac\005\uffac\007\uffac\012\uffac\013" +
    "\uffac\015\uffac\017\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\161\051\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\001\002\000\056" +
    "\004\uffc3\005\uffc3\007\uffc3\012\uffc3\013\uffc3\015\uffc3\017" +
    "\uffc3\042\uffc3\043\113\044\uffc3\045\uffc3\046\116\047\115" +
    "\050\114\051\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\001\002\000\004\016\156\001\002" +
    "\000\056\004\uffa7\005\uffa7\007\uffa7\012\uffa7\013\uffa7\015" +
    "\uffa7\017\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\053\uffa7\054\uffa7\055\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\001\002\000\056\004\uffa5" +
    "\005\uffa5\007\uffa5\012\uffa5\013\uffa5\015\uffa5\017\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\001\002\000\030\012\070\014\050\016\073" +
    "\030\053\031\056\032\066\033\065\034\055\035\071\045" +
    "\067\052\064\001\002\000\034\012\070\013\uffc6\014\050" +
    "\016\073\030\053\031\056\032\066\033\065\034\055\035" +
    "\071\041\051\045\067\052\064\001\002\000\056\004\uffa4" +
    "\005\uffa4\007\uffa4\012\uffa4\013\uffa4\015\uffa4\017\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\001\002\000\056\004\uffcc\005\uffcc\007\uffcc" +
    "\012\uffcc\013\uffcc\015\uffcc\017\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\001" +
    "\002\000\032\012\070\014\050\016\073\030\053\031\056" +
    "\032\066\033\065\034\055\035\071\041\051\045\067\052" +
    "\064\001\002\000\034\012\076\017\110\042\111\044\103" +
    "\045\075\051\101\053\104\054\106\055\077\056\105\057" +
    "\107\060\102\061\100\001\002\000\030\012\070\014\050" +
    "\016\073\030\053\031\056\032\066\033\065\034\055\035" +
    "\071\045\067\052\064\001\002\000\034\007\134\012\070" +
    "\014\050\016\073\030\053\031\056\032\066\033\065\034" +
    "\055\035\071\041\051\045\067\052\064\001\002\000\030" +
    "\012\070\014\050\016\073\030\053\031\056\032\066\033" +
    "\065\034\055\035\071\045\067\052\064\001\002\000\030" +
    "\012\070\014\050\016\073\030\053\031\056\032\066\033" +
    "\065\034\055\035\071\045\067\052\064\001\002\000\030" +
    "\012\070\014\050\016\073\030\053\031\056\032\066\033" +
    "\065\034\055\035\071\045\067\052\064\001\002\000\030" +
    "\012\070\014\050\016\073\030\053\031\056\032\066\033" +
    "\065\034\055\035\071\045\067\052\064\001\002\000\030" +
    "\012\070\014\050\016\073\030\053\031\056\032\066\033" +
    "\065\034\055\035\071\045\067\052\064\001\002\000\030" +
    "\012\070\014\050\016\073\030\053\031\056\032\066\033" +
    "\065\034\055\035\071\045\067\052\064\001\002\000\030" +
    "\012\070\014\050\016\073\030\053\031\056\032\066\033" +
    "\065\034\055\035\071\045\067\052\064\001\002\000\030" +
    "\012\070\014\050\016\073\030\053\031\056\032\066\033" +
    "\065\034\055\035\071\045\067\052\064\001\002\000\030" +
    "\012\070\014\050\016\073\030\053\031\056\032\066\033" +
    "\065\034\055\035\071\045\067\052\064\001\002\000\056" +
    "\004\uffa8\005\uffa8\007\uffa8\012\uffa8\013\uffa8\015\uffa8\017" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\001\002\000\030\012\070\014\050" +
    "\016\073\030\053\031\056\032\066\033\065\034\055\035" +
    "\071\045\067\052\064\001\002\000\056\004\uffbf\005\uffbf" +
    "\007\uffbf\012\uffbf\013\uffbf\015\uffbf\017\uffbf\042\uffbf\043" +
    "\113\044\uffbf\045\uffbf\046\116\047\115\050\114\051\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\001\002\000\030\012\070\014\050\016\073\030\053" +
    "\031\056\032\066\033\065\034\055\035\071\045\067\052" +
    "\064\001\002\000\030\012\070\014\050\016\073\030\053" +
    "\031\056\032\066\033\065\034\055\035\071\045\067\052" +
    "\064\001\002\000\030\012\070\014\050\016\073\030\053" +
    "\031\056\032\066\033\065\034\055\035\071\045\067\052" +
    "\064\001\002\000\030\012\070\014\050\016\073\030\053" +
    "\031\056\032\066\033\065\034\055\035\071\045\067\052" +
    "\064\001\002\000\056\004\uffb1\005\uffb1\007\uffb1\012\uffb1" +
    "\013\uffb1\015\uffb1\017\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002\000" +
    "\056\004\uffb0\005\uffb0\007\uffb0\012\uffb0\013\uffb0\015\uffb0" +
    "\017\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\001\002\000\056\004\uffaf\005" +
    "\uffaf\007\uffaf\012\uffaf\013\uffaf\015\uffaf\017\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\001\002\000\056\004\uffae\005\uffae\007\uffae\012" +
    "\uffae\013\uffae\015\uffae\017\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\001\002" +
    "\000\056\004\uffba\005\uffba\007\uffba\012\uffba\013\uffba\015" +
    "\uffba\017\uffba\042\uffba\043\113\044\uffba\045\uffba\046\116" +
    "\047\115\050\114\051\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\001\002\000\056\004\uffbd" +
    "\005\uffbd\007\uffbd\012\uffbd\013\uffbd\015\uffbd\017\uffbd\042" +
    "\uffbd\043\113\044\uffbd\045\uffbd\046\116\047\115\050\114" +
    "\051\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\001\002\000\056\004\uffbb\005\uffbb\007\uffbb" +
    "\012\uffbb\013\uffbb\015\uffbb\017\uffbb\042\uffbb\043\113\044" +
    "\uffbb\045\uffbb\046\116\047\115\050\114\051\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\001" +
    "\002\000\056\004\uffb7\005\uffb7\007\uffb7\012\uffb7\013\uffb7" +
    "\015\uffb7\017\uffb7\042\uffb7\043\113\044\uffb7\045\uffb7\046" +
    "\116\047\115\050\114\051\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\001\002\000\056\004" +
    "\uffc1\005\uffc1\007\uffc1\012\uffc1\013\uffc1\015\uffc1\017\uffc1" +
    "\042\uffc1\043\113\044\uffc1\045\uffc1\046\116\047\115\050" +
    "\114\051\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\001\002\000\056\004\uffb9\005\uffb9\007" +
    "\uffb9\012\uffb9\013\uffb9\015\uffb9\017\uffb9\042\uffb9\043\113" +
    "\044\uffb9\045\uffb9\046\116\047\115\050\114\051\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\001\002\000\056\004\uffbe\005\uffbe\007\uffbe\012\uffbe\013" +
    "\uffbe\015\uffbe\017\uffbe\042\uffbe\043\113\044\uffbe\045\uffbe" +
    "\046\116\047\115\050\114\051\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\001\002\000\056" +
    "\004\uffb8\005\uffb8\007\uffb8\012\uffb8\013\uffb8\015\uffb8\017" +
    "\uffb8\042\uffb8\043\113\044\uffb8\045\uffb8\046\116\047\115" +
    "\050\114\051\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\001\002\000\056\004\uffbc\005\uffbc" +
    "\007\uffbc\012\uffbc\013\uffbc\015\uffbc\017\uffbc\042\uffbc\043" +
    "\113\044\uffbc\045\uffbc\046\116\047\115\050\114\051\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\001\002\000\032\012\070\014\050\016\073\030\053" +
    "\031\056\032\066\033\065\034\055\035\071\041\051\045" +
    "\067\052\064\001\002\000\036\007\136\012\076\013\137" +
    "\042\111\044\103\045\075\051\101\053\104\054\106\055" +
    "\077\056\105\057\107\060\102\061\100\001\002\000\034" +
    "\012\070\013\140\014\050\016\073\030\053\031\056\032" +
    "\066\033\065\034\055\035\071\041\051\045\067\052\064" +
    "\001\002\000\046\004\uffb3\005\uffb3\007\uffb3\012\uffb3\013" +
    "\uffb3\015\uffb3\017\uffb3\042\uffb3\044\uffb3\045\uffb3\051\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\001\002\000\046\004\uffb5\005\uffb5\007\uffb5\012\uffb5" +
    "\013\uffb5\015\uffb5\017\uffb5\042\uffb5\044\uffb5\045\uffb5\051" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\001\002\000\034\012\076\013\142\042\111\044" +
    "\103\045\075\051\101\053\104\054\106\055\077\056\105" +
    "\057\107\060\102\061\100\001\002\000\046\004\uffb6\005" +
    "\uffb6\007\uffb6\012\uffb6\013\uffb6\015\uffb6\017\uffb6\042\uffb6" +
    "\044\uffb6\045\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\001\002\000\034\012\076" +
    "\013\144\042\111\044\103\045\075\051\101\053\104\054" +
    "\106\055\077\056\105\057\107\060\102\061\100\001\002" +
    "\000\046\004\uffb4\005\uffb4\007\uffb4\012\uffb4\013\uffb4\015" +
    "\uffb4\017\uffb4\042\uffb4\044\uffb4\045\uffb4\051\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\001" +
    "\002\000\056\004\uffc0\005\uffc0\007\uffc0\012\uffc0\013\uffc0" +
    "\015\uffc0\017\uffc0\042\uffc0\043\113\044\uffc0\045\uffc0\046" +
    "\116\047\115\050\114\051\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\uffc0\001\002\000\004\013" +
    "\154\001\002\000\044\004\uffc4\005\150\012\076\013\uffc4" +
    "\015\uffc4\017\uffc4\042\111\044\103\045\075\051\101\053" +
    "\104\054\106\055\077\056\105\057\107\060\102\061\100" +
    "\001\002\000\032\012\070\014\050\016\073\030\053\031" +
    "\056\032\066\033\065\034\055\035\071\041\051\045\067" +
    "\052\064\001\002\000\012\004\uffc7\013\uffc7\015\uffc7\017" +
    "\uffc7\001\002\000\044\004\uffc4\005\150\012\076\013\uffc4" +
    "\015\uffc4\017\uffc4\042\111\044\103\045\075\051\101\053" +
    "\104\054\106\055\077\056\105\057\107\060\102\061\100" +
    "\001\002\000\012\004\uffc5\013\uffc5\015\uffc5\017\uffc5\001" +
    "\002\000\056\004\uffc8\005\uffc8\007\uffc8\012\uffc8\013\uffc8" +
    "\015\uffc8\017\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000\056\004" +
    "\uffab\005\uffab\007\uffab\012\uffab\013\uffab\015\uffab\017\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050" +
    "\uffab\051\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\061\uffab\001\002\000\032\012\070\014\050\016" +
    "\073\030\053\031\056\032\066\033\065\034\055\035\071" +
    "\041\051\045\067\052\064\001\002\000\034\012\076\017" +
    "\160\042\111\044\103\045\075\051\101\053\104\054\106" +
    "\055\077\056\105\057\107\060\102\061\100\001\002\000" +
    "\056\004\uffa2\005\uffa2\007\uffa2\012\uffa2\013\uffa2\015\uffa2" +
    "\017\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\001\002\000\030\012\070\014" +
    "\050\016\073\030\053\031\056\032\066\033\065\034\055" +
    "\035\071\045\067\052\064\001\002\000\056\004\uffad\005" +
    "\uffad\007\uffad\012\uffad\013\uffad\015\uffad\017\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\001\002\000\004\004\164\001\002\000\020\003" +
    "\uffd3\011\uffd3\030\uffd3\062\uffd3\064\uffd3\066\uffd3\070\uffd3" +
    "\001\002\000\034\012\070\014\050\016\073\017\uffc6\030" +
    "\053\031\056\032\066\033\065\034\055\035\071\041\051" +
    "\045\067\052\064\001\002\000\004\017\167\001\002\000" +
    "\056\004\uffd2\005\uffd2\007\uffd2\012\uffd2\013\uffd2\015\uffd2" +
    "\017\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\001\002\000\046\004\uffc2\005" +
    "\uffc2\007\uffc2\012\uffc2\013\uffc2\015\uffc2\017\uffc2\042\111" +
    "\044\uffc2\045\uffc2\051\101\053\uffc2\054\106\055\077\056" +
    "\105\057\107\060\102\061\100\001\002\000\004\015\172" +
    "\001\002\000\056\004\uffc9\005\uffc9\007\uffc9\012\uffc9\013" +
    "\uffc9\015\uffc9\017\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002\000\004" +
    "\030\174\001\002\000\062\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\012\uffca\013\uffca\015\uffca\017\uffca\040\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\001\002\000\020\003\uffe2\011\uffe2\030\uffe2\062" +
    "\uffe2\064\uffe2\066\uffe2\070\uffe2\001\002\000\004\011\177" +
    "\001\002\000\034\002\uffe4\003\uffe4\010\uffe4\011\uffe4\030" +
    "\uffe4\036\uffe4\037\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\070\uffe4\001\002\000\020\003\uffd7\011\uffd7\030" +
    "\uffd7\062\uffd7\064\uffd7\066\uffd7\070\uffd7\001\002\000\034" +
    "\002\uffe3\003\uffe3\010\uffe3\011\uffe3\030\uffe3\036\uffe3\037" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\070\uffe3" +
    "\001\002\000\022\020\204\021\203\022\212\023\205\024" +
    "\207\025\213\026\206\030\210\001\002\000\014\004\uffff" +
    "\005\uffff\010\uffff\017\uffff\040\uffff\001\002\000\014\004" +
    "\000\005\000\010\000\017\000\040\000\001\002\000\014" +
    "\004\ufffd\005\ufffd\010\ufffd\017\ufffd\040\ufffd\001\002\000" +
    "\014\004\ufffa\005\ufffa\010\ufffa\017\ufffa\040\ufffa\001\002" +
    "\000\014\004\ufffb\005\ufffb\010\ufffb\017\ufffb\040\ufffb\001" +
    "\002\000\014\004\ufff9\005\ufff9\010\ufff9\017\ufff9\040\ufff9" +
    "\001\002\000\012\004\uffef\005\uffef\017\uffef\040\uffef\001" +
    "\002\000\014\004\ufffe\005\ufffe\010\ufffe\017\ufffe\040\ufffe" +
    "\001\002\000\014\004\ufffc\005\ufffc\010\ufffc\017\ufffc\040" +
    "\ufffc\001\002\000\032\012\070\014\050\016\073\030\053" +
    "\031\056\032\066\033\065\034\055\035\071\041\051\045" +
    "\067\052\064\001\002\000\034\012\076\017\216\042\111" +
    "\044\103\045\075\051\101\053\104\054\106\055\077\056" +
    "\105\057\107\060\102\061\100\001\002\000\004\010\020" +
    "\001\002\000\022\003\uffd5\011\uffd5\030\uffd5\062\uffd5\063" +
    "\220\064\uffd5\066\uffd5\070\uffd5\001\002\000\004\010\020" +
    "\001\002\000\020\003\uffd6\011\uffd6\030\uffd6\062\uffd6\064" +
    "\uffd6\066\uffd6\070\uffd6\001\002\000\020\003\uffdd\011\uffdd" +
    "\030\uffdd\062\uffdd\064\uffdd\066\uffdd\070\uffdd\001\002\000" +
    "\020\003\uffd0\011\uffd0\030\uffd0\062\uffd0\064\uffd0\066\uffd0" +
    "\070\uffd0\001\002\000\034\004\225\012\076\042\111\044" +
    "\103\045\075\051\101\053\104\054\106\055\077\056\105" +
    "\057\107\060\102\061\100\001\002\000\020\003\uffd1\011" +
    "\uffd1\030\uffd1\062\uffd1\064\uffd1\066\uffd1\070\uffd1\001\002" +
    "\000\032\012\070\014\050\016\073\030\053\031\056\032" +
    "\066\033\065\034\055\035\071\041\051\045\067\052\064" +
    "\001\002\000\034\012\076\017\230\042\111\044\103\045" +
    "\075\051\101\053\104\054\106\055\077\056\105\057\107" +
    "\060\102\061\100\001\002\000\004\067\231\001\002\000" +
    "\004\010\020\001\002\000\020\003\uffd4\011\uffd4\030\uffd4" +
    "\062\uffd4\064\uffd4\066\uffd4\070\uffd4\001\002\000\004\011" +
    "\uffe0\001\002\000\032\012\070\014\050\016\073\030\053" +
    "\031\056\032\066\033\065\034\055\035\071\041\051\045" +
    "\067\052\064\001\002\000\034\004\236\012\076\042\111" +
    "\044\103\045\075\051\101\053\104\054\106\055\077\056" +
    "\105\057\107\060\102\061\100\001\002\000\020\003\uffcf" +
    "\011\uffcf\030\uffcf\062\uffcf\064\uffcf\066\uffcf\070\uffcf\001" +
    "\002\000\014\003\ufff6\010\ufff6\030\ufff6\036\ufff6\037\ufff6" +
    "\001\002\000\004\002\ufff8\001\002\000\004\004\244\001" +
    "\002\000\034\004\uffc6\012\070\014\050\016\073\030\053" +
    "\031\056\032\066\033\065\034\055\035\071\041\051\045" +
    "\067\052\064\001\002\000\004\004\uffed\001\002\000\026" +
    "\003\uffee\010\uffee\011\uffee\030\uffee\036\uffee\037\uffee\062" +
    "\uffee\064\uffee\066\uffee\070\uffee\001\002\000\004\007\246" +
    "\001\002\000\006\004\uffe7\030\012\001\002\000\010\004" +
    "\uffe5\005\252\017\uffe5\001\002\000\004\004\251\001\002" +
    "\000\014\003\uffeb\010\uffeb\030\uffeb\036\uffeb\037\uffeb\001" +
    "\002\000\004\030\012\001\002\000\006\004\uffe8\017\uffe8" +
    "\001\002\000\010\004\uffe5\005\252\017\uffe5\001\002\000" +
    "\006\004\uffe6\017\uffe6\001\002\000\014\003\ufff1\010\ufff1" +
    "\030\ufff1\036\ufff1\037\ufff1\001\002\000\004\016\260\001" +
    "\002\000\006\017\uffe7\030\012\001\002\000\004\017\262" +
    "\001\002\000\004\007\263\001\002\000\024\020\204\021" +
    "\203\022\212\023\205\024\207\025\213\026\206\027\265" +
    "\030\210\001\002\000\004\010\020\001\002\000\004\010" +
    "\uffea\001\002\000\004\010\uffe9\001\002\000\014\003\ufff0" +
    "\010\ufff0\030\ufff0\036\ufff0\037\ufff0\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\022\017\015\021\014\023\004\026\016\030" +
    "\003\031\005\032\006\043\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\240\001\001\000" +
    "\002\001\001\000\016\017\015\021\014\023\004\030\236" +
    "\031\005\032\237\001\001\000\034\003\020\011\024\017" +
    "\027\021\014\027\037\033\030\034\021\035\032\036\031" +
    "\037\034\040\033\041\035\042\040\001\001\000\002\001" +
    "\001\000\026\003\020\011\024\033\232\034\021\035\032" +
    "\036\031\037\034\040\033\041\035\042\040\001\001\000" +
    "\002\001\001\000\026\003\045\004\223\005\062\006\060" +
    "\007\061\010\046\011\051\012\053\013\071\014\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\020\011\024\017" +
    "\174\021\014\033\175\034\021\035\032\036\031\037\034" +
    "\040\033\041\035\042\040\001\001\000\002\001\001\000" +
    "\004\032\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\045\004\056\005\062\006\060\007\061\010" +
    "\046\011\051\012\053\013\071\014\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\045\004\146\005" +
    "\062\006\060\007\061\010\046\011\051\012\053\013\071" +
    "\014\057\015\170\001\001\000\026\003\045\004\167\005" +
    "\062\006\060\007\061\010\046\011\051\012\053\013\071" +
    "\014\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\045\007\154\010\046\011" +
    "\051\012\053\013\071\014\057\001\001\000\030\003\045" +
    "\004\146\005\062\006\060\007\061\010\046\011\051\012" +
    "\053\013\071\014\057\015\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\045\004\073\005\062\006" +
    "\060\007\061\010\046\011\051\012\053\013\071\014\057" +
    "\001\001\000\002\001\001\000\024\003\045\005\144\006" +
    "\060\007\061\010\046\011\051\012\053\013\071\014\057" +
    "\001\001\000\026\003\045\004\134\005\062\006\060\007" +
    "\061\010\046\011\051\012\053\013\071\014\057\001\001" +
    "\000\024\003\045\005\132\006\060\007\061\010\046\011" +
    "\051\012\053\013\071\014\057\001\001\000\024\003\045" +
    "\005\131\006\060\007\061\010\046\011\051\012\053\013" +
    "\071\014\057\001\001\000\024\003\045\005\130\006\060" +
    "\007\061\010\046\011\051\012\053\013\071\014\057\001" +
    "\001\000\024\003\045\005\127\006\060\007\061\010\046" +
    "\011\051\012\053\013\071\014\057\001\001\000\024\003" +
    "\045\005\126\006\060\007\061\010\046\011\051\012\053" +
    "\013\071\014\057\001\001\000\024\003\045\005\125\006" +
    "\060\007\061\010\046\011\051\012\053\013\071\014\057" +
    "\001\001\000\024\003\045\005\124\006\060\007\061\010" +
    "\046\011\051\012\053\013\071\014\057\001\001\000\024" +
    "\003\045\005\123\006\060\007\061\010\046\011\051\012" +
    "\053\013\071\014\057\001\001\000\024\003\045\005\122" +
    "\006\060\007\061\010\046\011\051\012\053\013\071\014" +
    "\057\001\001\000\002\001\001\000\024\003\045\005\111" +
    "\006\060\007\061\010\046\011\051\012\053\013\071\014" +
    "\057\001\001\000\002\001\001\000\022\003\045\006\121" +
    "\007\061\010\046\011\051\012\053\013\071\014\057\001" +
    "\001\000\022\003\045\006\120\007\061\010\046\011\051" +
    "\012\053\013\071\014\057\001\001\000\022\003\045\006" +
    "\117\007\061\010\046\011\051\012\053\013\071\014\057" +
    "\001\001\000\022\003\045\006\116\007\061\010\046\011" +
    "\051\012\053\013\071\014\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\045" +
    "\004\142\005\062\006\060\007\061\010\046\011\051\012" +
    "\053\013\071\014\057\001\001\000\002\001\001\000\026" +
    "\003\045\004\140\005\062\006\060\007\061\010\046\011" +
    "\051\012\053\013\071\014\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\150\001\001\000\026\003\045\004" +
    "\151\005\062\006\060\007\061\010\046\011\051\012\053" +
    "\013\071\014\057\001\001\000\002\001\001\000\004\016" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\045\004\156\005\062\006\060\007" +
    "\061\010\046\011\051\012\053\013\071\014\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\045\006" +
    "\161\007\061\010\046\011\051\012\053\013\071\014\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\045\004\146\005\062\006\060\007\061" +
    "\010\046\011\051\012\053\013\071\014\057\015\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\045\004\214\005\062\006\060\007\061\010" +
    "\046\011\051\012\053\013\071\014\057\001\001\000\002" +
    "\001\001\000\004\032\216\001\001\000\002\001\001\000" +
    "\004\032\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\045\004\226\005\062\006\060\007\061\010\046" +
    "\011\051\012\053\013\071\014\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\045\004\234\005" +
    "\062\006\060\007\061\010\046\011\051\012\053\013\071" +
    "\014\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\045\004\146\005\062\006\060\007\061\010\046\011" +
    "\051\012\053\013\071\014\057\015\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\246\024\247\001\001\000\004\025\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\253\001\001\000" +
    "\002\001\001\000\004\025\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\246\024" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\265\022\263\001\001\000\004\032\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$QCup$actions {
  private final QCup parser;

  /** Constructor */
  CUP$QCup$actions(QCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$QCup$do_action(
    int                        CUP$QCup$act_num,
    java_cup.runtime.lr_parser CUP$QCup$parser,
    java.util.Stack            CUP$QCup$stack,
    int                        CUP$QCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QCup$result;

      /* select the action based on the action number */
      switch (CUP$QCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // final ::= sequence 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		SequenceNode e = (SequenceNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // final ::= LENGTH LEFTPAREN expression RIGHTPAREN 
            {
              ExprNode RESULT =null;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		Object length = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new LengthNode(e);  RESULT.setPosition(lengthleft, lengthright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // final ::= function_call 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		FuncCallExprNode e = (FuncCallExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // final ::= CHARLITERAL 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new CharNode(val); RESULT.setPosition(valleft, valright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // final ::= BOOLLITERAL 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		boolean val = (boolean)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new BoolNode(val);  RESULT.setPosition(valleft, valright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // final ::= FLOATLITERAL 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		float val = (float)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new FloatNode(val); RESULT.setPosition(valleft, valright);
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // final ::= INTLITERAL 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		int val = (int)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IntNode(val); RESULT.setPosition(valleft, valright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // final ::= LEFTPAREN expression RIGHTPAREN 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // final ::= accessor 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		AccessorNode e = (AccessorNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exponent ::= final 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exponent",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exponent ::= MINUS exponent 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NegativeNode(e); RESULT.setPosition(eleft, eright);
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exponent",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= exponent 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= exponent POWER factor 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NumericOperationNode(NumericOperationNode.POWER, e1, e2); RESULT.setPosition(e1left, e1right);
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // term ::= term AND factor 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new BooleanOperationNode(BooleanOperationNode.AND, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term ::= term POWER factor 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NumericOperationNode(NumericOperationNode.POWER, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // term ::= term DIVIDE factor 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NumericOperationNode(NumericOperationNode.DIVIDE, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term ::= term MULTIPLY factor 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NumericOperationNode(NumericOperationNode.MULTIPLY, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term ::= factor 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression LEFTBRACKET expression RIGHTBRACKET 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IndexNode(e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression LEFTBRACKET COLON expression RIGHTBRACKET 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IndexRangeNode(e1, null, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression LEFTBRACKET expression COLON RIGHTBRACKET 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		 RESULT = new IndexRangeNode(e1, e2, null); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression LEFTBRACKET expression COLON expression RIGHTBRACKET 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode e3 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IndexRangeNode(e1, e2, e3); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression CONCAT term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ConcatNode(e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression NOTEQUAL term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new EqualsNode(EqualsNode.NOTEQUAL, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression EQUAL term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new EqualsNode(EqualsNode.EQUAL, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression GREATERTHANEQUAL term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ComparisonNode(ComparisonNode.GREATERTHANEQUAL, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression GREATERTHAN term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ComparisonNode(ComparisonNode.GREATERTHAN, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression LESSTHANEQUAL term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ComparisonNode(ComparisonNode.LESSTHANEQUAL, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression LESSTHAN term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ComparisonNode(ComparisonNode.LESSTHAN, e1, e2); RESULT.setPosition(e1left, e1right);
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression IN term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new InNode(e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression OR term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new BooleanOperationNode(BooleanOperationNode.OR, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression MINUS term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NumericOperationNode(NumericOperationNode.MINUS, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression PLUS term 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NumericOperationNode(NumericOperationNode.PLUS, e1, e2); RESULT.setPosition(e1left, e1right); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= NOT expression 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NotNode(e); RESULT.setPosition(eleft, eright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_clist2 ::= 
            {
              LinkedList<ExprNode> RESULT =null;
		 RESULT = new LinkedList<ExprNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist2",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression_clist2 ::= COMMA expression expression_clist2 
            {
              LinkedList<ExprNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ExprNode> expr_list = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = expr_list; if(expr != null) {RESULT.addFirst(expr);} 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist2",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression_clist ::= 
            {
              LinkedList<ExprNode> RESULT =null;
		 RESULT = new LinkedList<ExprNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression_clist ::= expression expression_clist2 
            {
              LinkedList<ExprNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ExprNode> expr_list = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = expr_list; if(expr != null) {RESULT.addFirst(expr);} 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list ::= LEFTBRACKET expression_clist RIGHTBRACKET 
            {
              LinkedList<ExprNode> RESULT =null;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> expr_list = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = expr_list; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("list",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tuple ::= LEFTTBRACKET expression_clist RIGHTTBRACKET 
            {
              LinkedList<ExprNode> RESULT =null;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> expr_list = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = expr_list; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tuple",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // accessor ::= accessor DOT ID 
            {
              AccessorNode RESULT =null;
		int parentleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		AccessorNode parent = (AccessorNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new AccessorNode(parent, id); RESULT.setPosition(parentleft, parentright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("accessor",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // accessor ::= ID 
            {
              AccessorNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new AccessorNode(id); RESULT.setPosition(idleft, idright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("accessor",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sequence ::= list 
            {
              SequenceNode RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ExprNode> seq = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new SequenceNode(seq); RESULT.setPosition(seqleft, seqright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sequence ::= tuple 
            {
              SequenceNode RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ExprNode> seq = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new SequenceNode(seq); RESULT.setPosition(seqleft, seqright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sequence ::= STRINGLITERAL 
            {
              SequenceNode RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new StringNode(str); RESULT.setPosition(strleft, strright);  
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignment ::= accessor ASSIGN expression SEMICOLON 
            {
              StatementNode RESULT =null;
		int accessorleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int accessorright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		AccessorNode accessor = (AccessorNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new AssignmentNode(accessor, expr); RESULT.setPosition(accessorleft, accessorright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("assignment",31, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // return ::= RETURN SEMICOLON 
            {
              StatementNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ReturnNode(); RESULT.setPosition(rleft, rright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // return ::= RETURN expression SEMICOLON 
            {
              StatementNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ReturnNode(expr); RESULT.setPosition(rleft, rright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_call ::= ID LEFTPAREN expression_clist RIGHTPAREN 
            {
              FuncCallExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> expr_list = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FuncCallExprNode(id, expr_list); RESULT.setPosition(idleft, idright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // repeatuntil ::= REPEAT block UNTIL LEFTPAREN expression RIGHTPAREN SEMICOLON 
            {
              StatementNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int loopleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int loopright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		BlockNode loop = (BlockNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode condition = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		 RESULT = new RepeatNode(loop, condition); RESULT.setPosition(rleft, rright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("repeatuntil",29, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while ::= WHILE LEFTPAREN expression RIGHTPAREN DO block 
            {
              StatementNode RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		ExprNode condition = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int loopleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int loopright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		BlockNode loop = (BlockNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new WhileNode(condition, loop); RESULT.setPosition(wleft, wright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("while",30, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if ::= IF LEFTPAREN expression RIGHTPAREN block 
            {
              StatementNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode condition = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int true_blockleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int true_blockright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		BlockNode true_block = (BlockNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IfNode(condition, true_block); RESULT.setPosition(ileft, iright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifelse ::= IF LEFTPAREN expression RIGHTPAREN block ELSE block 
            {
              StatementNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		ExprNode condition = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int true_blockleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int true_blockright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		BlockNode true_block = (BlockNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int false_blockleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int false_blockright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		BlockNode false_block = (BlockNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IfNode(condition, true_block, false_block); RESULT.setPosition(ileft, iright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ifelse",28, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= error SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = null;  System.out.println("Could not understand statement at line " + (eleft+1) + ", column " + (eright+1) + ". Ignoring."); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= return 
            {
              StatementNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		StatementNode stmt = (StatementNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = stmt; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= repeatuntil 
            {
              StatementNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		StatementNode stmt = (StatementNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = stmt; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= while 
            {
              StatementNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		StatementNode stmt = (StatementNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = stmt; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= if 
            {
              StatementNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		StatementNode stmt = (StatementNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = stmt; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= ifelse 
            {
              StatementNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		StatementNode stmt = (StatementNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = stmt; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= function_call SEMICOLON 
            {
              StatementNode RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		FuncCallExprNode call = (FuncCallExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FuncCallStmtNode(call); RESULT.setPosition(callleft, callright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= assignment 
            {
              StatementNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		StatementNode stmt = (StatementNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = stmt; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= 
            {
              LinkedList<StatementNode> RESULT =null;
		 RESULT = new LinkedList<StatementNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement_list",25, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_list ::= statement statement_list 
            {
              LinkedList<StatementNode> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		StatementNode statement = (StatementNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<StatementNode> statement_list = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = statement_list; if(statement != null) {RESULT.addFirst(statement);} 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement_list",25, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // local_decl_list ::= var_decl 
            {
              LinkedList<DeclNode> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		VarDeclNode decl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new LinkedList<DeclNode>(); if(decl != null) {RESULT.addFirst(decl);} 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("local_decl_list",21, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // local_decl_list ::= local_decl_list var_decl 
            {
              LinkedList<DeclNode> RESULT =null;
		int decl_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int decl_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<DeclNode> decl_list = (LinkedList<DeclNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		VarDeclNode decl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = decl_list; if(decl != null) {RESULT.addLast(decl);} 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("local_decl_list",21, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // block ::= LEFTBRACE statement_list RIGHTBRACE 
            {
              BlockNode RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> statement_list = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new BlockNode(statement_list); RESULT.setPosition(lbleft, lbright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("block",24, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // block ::= LEFTBRACE local_decl_list statement_list RIGHTBRACE 
            {
              BlockNode RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int decl_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int decl_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		LinkedList<DeclNode> decl_list = (LinkedList<DeclNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> statement_list = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new BlockNode(decl_list, statement_list); RESULT.setPosition(lbleft, lbright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("block",24, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_clist2 ::= 
            {
              LinkedList<VarTypeNode> RESULT =null;
		 RESULT = new LinkedList<VarTypeNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist2",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_clist2 ::= COMMA var_type parameter_clist2 
            {
              LinkedList<VarTypeNode> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		VarTypeNode param = (VarTypeNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int param_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int param_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<VarTypeNode> param_list = (LinkedList<VarTypeNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = param_list; if(param != null) {RESULT.addFirst(param);} 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist2",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter_clist ::= 
            {
              LinkedList<VarTypeNode> RESULT =null;
		 RESULT = new LinkedList<VarTypeNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameter_clist ::= var_type parameter_clist2 
            {
              LinkedList<VarTypeNode> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		VarTypeNode param = (VarTypeNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int param_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int param_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<VarTypeNode> param_list = (LinkedList<VarTypeNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = param_list; if(param != null) {RESULT.addFirst(param);} 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_type ::= type 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = type; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_type",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_type ::= VOID 
            {
              String RESULT =null;
		 RESULT = "void"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_type",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datatype_decl ::= TDEF ID COLON parameter_clist SEMICOLON 
            {
              DatatypeDeclNode RESULT =null;
		int tdefleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int tdefright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		Object tdef = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int param_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int param_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<VarTypeNode> param_list = (LinkedList<VarTypeNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new DatatypeDeclNode(id, param_list); RESULT.setPosition(tdefleft, tdefright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("datatype_decl",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_init ::= 
            {
              LinkedList<ExprNode> RESULT =null;
		 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_init",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_init ::= ASSIGN expression_clist 
            {
              LinkedList<ExprNode> RESULT =null;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ExprNode> expr_list = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = expr_list; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_init",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_decl ::= var_type var_init SEMICOLON 
            {
              VarDeclNode RESULT =null;
		int var_typeleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int var_typeright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		VarTypeNode var_type = (VarTypeNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int var_initleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int var_initright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> var_init = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new VarDeclNode(var_type, var_init); RESULT.setPosition(var_typeleft, var_typeright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_decl",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_type ::= ID COLON type 
            {
              VarTypeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new VarTypeNode(id, type); RESULT.setPosition(idleft, idright); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_type",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_decl ::= FDEF ID LEFTPAREN parameter_clist RIGHTPAREN COLON function_type block 
            {
              FuncDeclNode RESULT =null;
		int fdefleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-7)).left;
		int fdefright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-7)).right;
		Object fdef = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int param_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int param_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		LinkedList<VarTypeNode> param_list = (LinkedList<VarTypeNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		BlockNode body = (BlockNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		RESULT = new FuncDeclNode(id, param_list, type, body); RESULT.setPosition(fdefleft, fdefright);  
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_decl",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-7)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // global_decl ::= error SEMICOLON 
            {
              DeclNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = null; System.out.println("Could not understand global declaration at line " + (eleft+1) + ", column " + (eright+1) + ". Ignoring."); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // global_decl ::= function_decl 
            {
              DeclNode RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		FuncDeclNode decl = (FuncDeclNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = decl; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // global_decl ::= var_decl 
            {
              DeclNode RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		VarDeclNode decl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = decl; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // global_decl ::= datatype_decl 
            {
              DeclNode RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		DatatypeDeclNode decl = (DatatypeDeclNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = decl; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global_decl_list ::= global_decl 
            {
              LinkedList<DeclNode> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		DeclNode decl = (DeclNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new LinkedList<DeclNode>(); if(decl != null) {RESULT.addFirst(decl);} 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // global_decl_list ::= global_decl_list global_decl 
            {
              LinkedList<DeclNode> RESULT =null;
		int decl_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int decl_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<DeclNode> decl_list = (LinkedList<DeclNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		DeclNode decl = (DeclNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = decl_list; if(decl != null) {RESULT.addLast(decl);} 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= block 
            {
              ProgramNode RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		BlockNode block = (BlockNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ProgramNode(block);  System.out.println("Parsing complete"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",33, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= global_decl_list block 
            {
              ProgramNode RESULT =null;
		int decl_listleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int decl_listright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<DeclNode> decl_list = (LinkedList<DeclNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		BlockNode block = (BlockNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ProgramNode(decl_list, block); System.out.println("Parsing complete"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",33, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = id; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= TUPLE 
            {
              String RESULT =null;
		 RESULT = "tuple"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= LIST 
            {
              String RESULT =null;
		 RESULT = "list"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= STRING 
            {
              String RESULT =null;
		 RESULT = "string"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "bool"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		RESULT = start_val;
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QCup$parser.done_parsing();
          return CUP$QCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

