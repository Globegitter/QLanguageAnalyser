
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 16 23:15:40 GMT 2013
//----------------------------------------------------

package uk.ac.ucl.comp2010.bestgroup;

import java_cup.runtime.*;
import uk.ac.ucl.comp2010.bestgroup.AST.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 16 23:15:40 GMT 2013
  */
public class QCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public QCup() {super();}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\010\000\002\005\006\000" +
    "\002\006\014\000\002\010\007\000\002\010\005\000\002" +
    "\007\003\000\002\007\002\000\002\011\007\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\012\004\000\002\012\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\012\004\012\023\ufffe\027\013\030\010\001" +
    "\002\000\004\023\061\001\002\000\012\004\ufffd\023\ufffd" +
    "\027\ufffd\030\ufffd\001\002\000\012\004\012\023\ufffe\027" +
    "\013\030\010\001\002\000\004\002\057\001\002\000\004" +
    "\004\044\001\002\000\012\004\ufffc\023\ufffc\027\ufffc\030" +
    "\ufffc\001\002\000\004\015\027\001\002\000\004\004\015" +
    "\001\002\000\012\004\ufffb\023\ufffb\027\ufffb\030\ufffb\001" +
    "\002\000\004\015\016\001\002\000\006\004\017\013\ufff4" +
    "\001\002\000\004\015\023\001\002\000\004\013\022\001" +
    "\002\000\006\013\ufff5\020\ufff5\001\002\000\012\004\ufff3" +
    "\023\ufff3\027\ufff3\030\ufff3\001\002\000\004\005\024\001" +
    "\002\000\010\013\ufff6\014\025\020\ufff6\001\002\000\004" +
    "\004\017\001\002\000\006\013\ufff7\020\ufff7\001\002\000" +
    "\004\005\030\001\002\000\006\013\031\053\032\001\002" +
    "\000\012\004\ufff9\023\ufff9\027\ufff9\030\ufff9\001\002\000" +
    "\014\006\037\007\042\010\040\011\041\012\034\001\002" +
    "\000\004\013\uffec\001\002\000\004\013\uffee\001\002\000" +
    "\004\013\043\001\002\000\004\013\uffed\001\002\000\004" +
    "\013\ufff2\001\002\000\004\013\ufff0\001\002\000\004\013" +
    "\uffef\001\002\000\004\013\ufff1\001\002\000\012\004\ufffa" +
    "\023\ufffa\027\ufffa\030\ufffa\001\002\000\004\017\045\001" +
    "\002\000\006\004\017\020\ufff4\001\002\000\004\020\047" +
    "\001\002\000\004\015\050\001\002\000\004\005\051\001" +
    "\002\000\004\023\052\001\002\000\004\024\uffea\001\002" +
    "\000\004\024\uffea\001\002\000\004\024\055\001\002\000" +
    "\012\004\ufff8\023\ufff8\027\ufff8\030\ufff8\001\002\000\004" +
    "\024\uffeb\001\002\000\004\002\000\001\002\000\004\023" +
    "\uffff\001\002\000\004\024\uffea\001\002\000\004\024\063" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\016\002\006\003\003\004\005\005\004\006" +
    "\010\011\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\057\004\005\005\004\006\010\011\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\017\010\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\034\015\035\016\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\045\010\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\053\013\052\001\001\000\006\012\055" +
    "\013\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\061\013\052\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$QCup$actions {
  private final QCup parser;

  /** Constructor */
  CUP$QCup$actions(QCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$QCup$do_action(
    int                        CUP$QCup$act_num,
    java_cup.runtime.lr_parser CUP$QCup$parser,
    java.util.Stack            CUP$QCup$stack,
    int                        CUP$QCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QCup$result;

      /* select the action based on the action number */
      switch (CUP$QCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementlist ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementlist",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statementlist ::= statement statementlist 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementlist",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= tuple 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= list 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= STRING 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= CHAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= FLOAT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= INT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= BOOL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tdef ::= TDEF ID COLON arglist SEMICOLON 
            {
              TDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArgListNode fields = (ArgListNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new TDefNode(id, fields); 
					   ((QLex) parser.getScanner()).addType(id); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tdef",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arglist ::= 
            {
              ArgListNode RESULT =null;
		RESULT = new ArgListNode(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("arglist",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arglist ::= nonemptyarglist 
            {
              ArgListNode RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArgListNode args = (ArgListNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = args; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("arglist",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nonemptyarglist ::= ID COLON TYPE 
            {
              ArgListNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ArgListNode(new ArgNode(id, t), null); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("nonemptyarglist",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nonemptyarglist ::= ID COLON TYPE COMMA nonemptyarglist 
            {
              ArgListNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArgListNode r = (ArgListNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ArgListNode(new ArgNode(id, t), r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("nonemptyarglist",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fdef ::= FDEF ID BRACKETOPEN arglist BRACKETCLOSE COLON TYPE CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              FDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		ArgListNode args = (ArgListNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FDefNode(id, args, t); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fdef",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-9)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vardef ::= ID COLON TYPE SEMICOLON 
            {
              VarDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new VarDefNode(id, t); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("vardef",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // vardef ::= ID COLON TYPE EQUALS literal SEMICOLON 
            {
              VarDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new VarDefNode(id, t, v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("vardef",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= tdef 
            {
              DecNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		TDefNode d = (TDefNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = d; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= fdef 
            {
              DecNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		FDefNode d = (FDefNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = d; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= vardef 
            {
              DecNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		VarDefNode d = (VarDefNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = d; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declist ::= 
            {
              DecListNode RESULT =null;
		 RESULT = null; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declist",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declist ::= dec declist 
            {
              DecListNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		DecNode d = (DecNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		DecListNode r = (DecListNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new DecListNode(d,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declist",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		RESULT = start_val;
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QCup$parser.done_parsing();
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declist CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              ProgramNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		DecListNode d = (DecListNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ProgramNode(d,s); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

