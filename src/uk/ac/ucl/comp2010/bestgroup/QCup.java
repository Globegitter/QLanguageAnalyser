
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 17 22:43:07 GMT 2013
//----------------------------------------------------

package uk.ac.ucl.comp2010.bestgroup;

import java_cup.runtime.*;
import uk.ac.ucl.comp2010.bestgroup.AST.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 17 22:43:07 GMT 2013
  */
public class QCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public QCup() {super();}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\010\000\002\005\006\000" +
    "\002\006\003\000\002\006\003\000\002\007\014\000\002" +
    "\011\007\000\002\011\005\000\002\010\003\000\002\010" +
    "\002\000\002\012\007\000\002\013\003\000\002\013\003" +
    "\000\002\022\006\000\002\017\003\000\002\017\006\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\005\000\002\017\006\000\002\017\007\000" +
    "\002\017\007\000\002\017\010\000\002\017\005\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\016" +
    "\005\000\002\021\004\000\002\021\002\000\002\020\006" +
    "\000\002\020\004\000\002\020\015\000\002\020\011\000" +
    "\002\020\012\000\002\020\013\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\012\004\012\025\ufffe\031\013\032\010\001" +
    "\002\000\004\025\232\001\002\000\012\004\ufffd\025\ufffd" +
    "\031\ufffd\032\ufffd\001\002\000\012\004\012\025\ufffe\031" +
    "\013\032\010\001\002\000\004\002\230\001\002\000\004" +
    "\004\147\001\002\000\012\004\ufffc\025\ufffc\031\ufffc\032" +
    "\ufffc\001\002\000\004\016\031\001\002\000\004\004\015" +
    "\001\002\000\012\004\ufffb\025\ufffb\031\ufffb\032\ufffb\001" +
    "\002\000\004\016\016\001\002\000\006\004\017\014\ufff2" +
    "\001\002\000\004\016\023\001\002\000\004\014\022\001" +
    "\002\000\006\014\ufff3\022\ufff3\001\002\000\012\004\ufff1" +
    "\025\ufff1\031\ufff1\032\ufff1\001\002\000\006\005\026\006" +
    "\024\001\002\000\014\014\uffef\015\uffef\022\uffef\025\uffef" +
    "\056\uffef\001\002\000\010\014\ufff4\015\027\022\ufff4\001" +
    "\002\000\014\014\ufff0\015\ufff0\022\ufff0\025\ufff0\056\ufff0" +
    "\001\002\000\004\004\017\001\002\000\006\014\ufff5\022" +
    "\ufff5\001\002\000\006\005\026\006\024\001\002\000\006" +
    "\014\033\056\034\001\002\000\012\004\ufff9\025\ufff9\031" +
    "\ufff9\032\ufff9\001\002\000\032\004\046\007\040\010\036" +
    "\011\054\012\053\013\043\021\042\023\045\027\052\044" +
    "\037\046\035\054\051\001\002\000\032\004\046\007\040" +
    "\010\036\011\054\012\053\013\043\021\042\023\045\027" +
    "\052\044\037\046\035\054\051\001\002\000\066\004\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\022\uffe9\024\uffe9\026" +
    "\uffe9\030\uffe9\034\uffe9\035\uffe9\037\uffe9\041\uffe9\043\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\055\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\001\002" +
    "\000\004\021\143\001\002\000\066\004\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\022\uffdc\024\uffdc\026\uffdc\030\uffdc" +
    "\034\uffdc\035\uffdc\037\uffdc\041\uffdc\043\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\062\uffdc\001\002\000\066\004" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\022\uffed\024\uffed" +
    "\026\uffed\030\uffed\034\uffed\035\uffed\037\uffed\041\uffed\043" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\055\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001" +
    "\002\000\032\004\046\007\040\010\036\011\054\012\053" +
    "\013\043\021\042\023\045\027\052\044\037\046\035\054" +
    "\051\001\002\000\066\004\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\022\uffd8\024\uffd8\026\uffd8\030\uffd8\034\uffd8\035" +
    "\uffd8\037\uffd8\041\uffd8\043\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\001\002\000\066\004\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\022\uffd7\024\uffd7\026\uffd7\030" +
    "\uffd7\034\uffd7\035\uffd7\037\uffd7\041\uffd7\043\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\055" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\001\002\000\032" +
    "\004\046\007\040\010\036\011\054\012\053\013\043\021" +
    "\042\023\045\027\052\044\037\046\035\054\051\001\002" +
    "\000\010\020\122\021\120\023\121\001\002\000\066\004" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\024\uffd6" +
    "\026\uffd6\030\uffd6\034\uffd6\035\uffd6\037\uffd6\041\uffd6\043" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\055\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\001" +
    "\002\000\040\014\117\017\070\043\064\045\067\046\057" +
    "\047\073\050\062\051\074\052\061\053\075\055\066\057" +
    "\071\060\065\061\063\062\060\001\002\000\032\004\046" +
    "\007\040\010\036\011\054\012\053\013\043\021\042\023" +
    "\045\027\052\044\037\046\035\054\051\001\002\000\032" +
    "\004\046\007\040\010\036\011\054\012\053\013\043\021" +
    "\042\023\045\027\052\044\037\046\035\054\051\001\002" +
    "\000\066\004\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\022" +
    "\uffd5\024\uffd5\026\uffd5\030\uffd5\034\uffd5\035\uffd5\037\uffd5" +
    "\041\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\055\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\001\002\000\066\004\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\022\uffe8\024\uffe8\026\uffe8\030\uffe8\034\uffe8" +
    "\035\uffe8\037\uffe8\041\uffe8\043\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\001\002\000\004\030\115\001" +
    "\002\000\046\015\072\017\070\022\uffcd\024\uffcd\030\uffcd" +
    "\043\064\045\067\046\057\047\073\050\062\051\074\052" +
    "\061\053\075\055\066\057\071\060\065\061\063\062\060" +
    "\001\002\000\032\004\046\007\040\010\036\011\054\012" +
    "\053\013\043\021\042\023\045\027\052\044\037\046\035" +
    "\054\051\001\002\000\032\004\046\007\040\010\036\011" +
    "\054\012\053\013\043\021\042\023\045\027\052\044\037" +
    "\046\035\054\051\001\002\000\032\004\046\007\040\010" +
    "\036\011\054\012\053\013\043\021\042\023\045\027\052" +
    "\044\037\046\035\054\051\001\002\000\032\004\046\007" +
    "\040\010\036\011\054\012\053\013\043\021\042\023\045" +
    "\027\052\044\037\046\035\054\051\001\002\000\032\004" +
    "\046\007\040\010\036\011\054\012\053\013\043\021\042" +
    "\023\045\027\052\044\037\046\035\054\051\001\002\000" +
    "\032\004\046\007\040\010\036\011\054\012\053\013\043" +
    "\021\042\023\045\027\052\044\037\046\035\054\051\001" +
    "\002\000\032\004\046\007\040\010\036\011\054\012\053" +
    "\013\043\021\042\023\045\027\052\044\037\046\035\054" +
    "\051\001\002\000\032\004\046\007\040\010\036\011\054" +
    "\012\053\013\043\021\042\023\045\027\052\044\037\046" +
    "\035\054\051\001\002\000\032\004\046\007\040\010\036" +
    "\011\054\012\053\013\043\021\042\023\045\027\052\044" +
    "\037\046\035\054\051\001\002\000\032\004\046\007\040" +
    "\010\036\011\054\012\053\013\043\021\042\023\045\027" +
    "\052\044\037\046\035\054\051\001\002\000\032\004\046" +
    "\007\040\010\036\011\054\012\053\013\043\021\042\023" +
    "\045\027\052\044\037\046\035\054\051\001\002\000\032" +
    "\004\046\007\040\010\036\011\054\012\053\013\043\021" +
    "\042\023\045\027\052\044\037\046\035\054\051\001\002" +
    "\000\032\004\046\007\040\010\036\011\054\012\053\013" +
    "\043\021\042\023\045\027\052\044\037\046\035\054\051" +
    "\001\002\000\032\004\046\007\040\010\036\011\054\012" +
    "\053\013\043\021\042\023\045\027\052\044\037\046\035" +
    "\054\051\001\002\000\032\004\046\007\040\010\036\011" +
    "\054\012\053\013\043\021\042\023\045\027\052\044\037" +
    "\046\035\054\051\001\002\000\066\004\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\070\022\uffdb\024\uffdb\026\uffdb\030\uffdb" +
    "\034\uffdb\035\uffdb\037\uffdb\041\uffdb\043\064\045\067\046" +
    "\057\047\073\050\062\051\074\052\uffdb\053\uffdb\055\066" +
    "\057\071\060\065\061\063\062\060\001\002\000\066\004" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\070\022\uffe2\024\uffe2" +
    "\026\uffe2\030\uffe2\034\uffe2\035\uffe2\037\uffe2\041\uffe2\043" +
    "\064\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\055\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\001" +
    "\002\000\066\004\uffe4\014\uffe4\015\uffe4\016\uffe4\017\070" +
    "\022\uffe4\024\uffe4\026\uffe4\030\uffe4\034\uffe4\035\uffe4\037" +
    "\uffe4\041\uffe4\043\064\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\074\052\uffe4\053\uffe4\055\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\001\002\000\010\022\uffce\024\uffce\030\uffce" +
    "\001\002\000\066\004\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\070\022\uffdf\024\uffdf\026\uffdf\030\uffdf\034\uffdf\035\uffdf" +
    "\037\uffdf\041\uffdf\043\064\045\067\046\057\047\073\050" +
    "\062\051\074\052\uffdf\053\uffdf\055\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\001\002\000\066\004\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\022\uffd4\024\uffd4\026\uffd4\030\uffd4" +
    "\034\uffd4\035\uffd4\037\uffd4\041\uffd4\043\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\001\002\000\066\004" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\070\022\uffe7\024\uffe7" +
    "\026\uffe7\030\uffe7\034\uffe7\035\uffe7\037\uffe7\041\uffe7\043" +
    "\064\045\uffe7\046\uffe7\047\073\050\062\051\074\052\uffe7" +
    "\053\uffe7\055\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\001" +
    "\002\000\066\004\uffdd\014\uffdd\015\uffdd\016\uffdd\017\070" +
    "\022\uffdd\024\uffdd\026\uffdd\030\uffdd\034\uffdd\035\uffdd\037" +
    "\uffdd\041\uffdd\043\064\045\067\046\057\047\073\050\062" +
    "\051\074\052\uffdd\053\uffdd\055\uffdd\057\071\060\065\061" +
    "\063\062\060\001\002\000\066\004\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\070\022\uffde\024\uffde\026\uffde\030\uffde\034" +
    "\uffde\035\uffde\037\uffde\041\uffde\043\064\045\067\046\057" +
    "\047\073\050\062\051\074\052\uffde\053\uffde\055\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\001\002\000\066\004\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\070\022\uffeb\024\uffeb\026" +
    "\uffeb\030\uffeb\034\uffeb\035\uffeb\037\uffeb\041\uffeb\043\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\055\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002" +
    "\000\066\004\uffe1\014\uffe1\015\uffe1\016\uffe1\017\070\022" +
    "\uffe1\024\uffe1\026\uffe1\030\uffe1\034\uffe1\035\uffe1\037\uffe1" +
    "\041\uffe1\043\064\045\067\046\057\047\073\050\062\051" +
    "\074\052\uffe1\053\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\001\002\000\066\004\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\070\022\uffe3\024\uffe3\026\uffe3\030\uffe3\034\uffe3" +
    "\035\uffe3\037\uffe3\041\uffe3\043\064\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\074\052\uffe3\053\uffe3\055\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\001\002\000\066\004\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\070\022\uffda\024\uffda\026\uffda" +
    "\030\uffda\034\uffda\035\uffda\037\uffda\041\uffda\043\064\045" +
    "\067\046\057\047\073\050\062\051\074\052\uffda\053\075" +
    "\055\066\057\071\060\065\061\063\062\060\001\002\000" +
    "\066\004\uffe0\014\uffe0\015\uffe0\016\uffe0\017\070\022\uffe0" +
    "\024\uffe0\026\uffe0\030\uffe0\034\uffe0\035\uffe0\037\uffe0\041" +
    "\uffe0\043\064\045\067\046\057\047\073\050\062\051\074" +
    "\052\uffe0\053\uffe0\055\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\001\002\000\066\004\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\070\022\uffe6\024\uffe6\026\uffe6\030\uffe6\034\uffe6\035" +
    "\uffe6\037\uffe6\041\uffe6\043\064\045\uffe6\046\uffe6\047\073" +
    "\050\062\051\074\052\uffe6\053\uffe6\055\uffe6\057\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\001\002\000\066\004\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\022\uffcb\024\uffcb\026\uffcb\030" +
    "\uffcb\034\uffcb\035\uffcb\037\uffcb\041\uffcb\043\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\055" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\001\002\000\066" +
    "\004\uffd9\014\uffd9\015\uffd9\016\uffd9\017\070\022\uffd9\024" +
    "\uffd9\026\uffd9\030\uffd9\034\uffd9\035\uffd9\037\uffd9\041\uffd9" +
    "\043\064\045\067\046\057\047\073\050\062\051\074\052" +
    "\uffd9\053\uffd9\055\066\057\071\060\065\061\063\062\060" +
    "\001\002\000\012\004\ufffa\025\ufffa\031\ufffa\032\ufffa\001" +
    "\002\000\032\004\046\007\040\010\036\011\054\012\053" +
    "\013\043\021\042\023\045\027\052\044\037\046\035\054" +
    "\051\001\002\000\034\004\046\007\040\010\036\011\054" +
    "\012\053\013\043\016\124\021\042\023\045\027\052\044" +
    "\037\046\035\054\051\001\002\000\004\004\123\001\002" +
    "\000\066\004\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\022" +
    "\uffcf\024\uffcf\026\uffcf\030\uffcf\034\uffcf\035\uffcf\037\uffcf" +
    "\041\uffcf\043\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\055\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\001\002\000\032\004\046\007\040\010\036\011" +
    "\054\012\053\013\043\021\042\023\045\027\052\044\037" +
    "\046\035\054\051\001\002\000\042\016\126\017\070\024" +
    "\127\043\064\045\067\046\057\047\073\050\062\051\074" +
    "\052\061\053\075\055\066\057\071\060\065\061\063\062" +
    "\060\001\002\000\034\004\046\007\040\010\036\011\054" +
    "\012\053\013\043\021\042\023\045\024\130\027\052\044" +
    "\037\046\035\054\051\001\002\000\066\004\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\022\uffd3\024\uffd3\026\uffd3\030" +
    "\uffd3\034\uffd3\035\uffd3\037\uffd3\041\uffd3\043\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\055" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\001\002\000\066" +
    "\004\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\022\uffd2\024" +
    "\uffd2\026\uffd2\030\uffd2\034\uffd2\035\uffd2\037\uffd2\041\uffd2" +
    "\043\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\055\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\001\002\000\040\017\070\024\132\043\064\045\067\046" +
    "\057\047\073\050\062\051\074\052\061\053\075\055\066" +
    "\057\071\060\065\061\063\062\060\001\002\000\066\004" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\024\uffd0" +
    "\026\uffd0\030\uffd0\034\uffd0\035\uffd0\037\uffd0\041\uffd0\043" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\055\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\001" +
    "\002\000\040\017\070\024\134\043\064\045\067\046\057" +
    "\047\073\050\062\051\074\052\061\053\075\055\066\057" +
    "\071\060\065\061\063\062\060\001\002\000\066\004\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\022\uffd1\024\uffd1\026" +
    "\uffd1\030\uffd1\034\uffd1\035\uffd1\037\uffd1\041\uffd1\043\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\001\002" +
    "\000\004\022\136\001\002\000\066\004\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\022\uffee\024\uffee\026\uffee\030\uffee" +
    "\034\uffee\035\uffee\037\uffee\041\uffee\043\uffee\045\uffee\046" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\055\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\001\002\000\004\024" +
    "\140\001\002\000\066\004\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\022\uffcc\024\uffcc\026\uffcc\030\uffcc\034\uffcc\035" +
    "\uffcc\037\uffcc\041\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\001\002\000\040\017\070\022\142" +
    "\043\064\045\067\046\057\047\073\050\062\051\074\052" +
    "\061\053\075\055\066\057\071\060\065\061\063\062\060" +
    "\001\002\000\066\004\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\022\uffea\024\uffea\026\uffea\030\uffea\034\uffea\035\uffea" +
    "\037\uffea\041\uffea\043\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\055\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\001\002\000\004\004\144\001\002\000" +
    "\004\022\145\001\002\000\066\004\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\022\uffec\024\uffec\026\uffec\030\uffec\034" +
    "\uffec\035\uffec\037\uffec\041\uffec\043\uffec\045\uffec\046\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\055\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\001\002\000\066\004\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\070\022\uffe5\024\uffe5\026" +
    "\uffe5\030\uffe5\034\uffe5\035\uffe5\037\uffe5\041\uffe5\043\064" +
    "\045\uffe5\046\uffe5\047\073\050\062\051\074\052\uffe5\053" +
    "\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\001\002" +
    "\000\004\021\150\001\002\000\006\004\017\022\ufff2\001" +
    "\002\000\004\022\152\001\002\000\004\016\153\001\002" +
    "\000\010\005\026\006\024\033\156\001\002\000\004\025" +
    "\157\001\002\000\004\025\ufff8\001\002\000\004\025\ufff7" +
    "\001\002\000\016\004\160\026\uffc9\034\162\035\167\037" +
    "\165\041\164\001\002\000\006\021\120\056\225\001\002" +
    "\000\004\014\224\001\002\000\032\004\046\007\040\010" +
    "\036\011\054\012\053\013\043\021\042\023\045\027\052" +
    "\044\037\046\035\054\051\001\002\000\016\004\160\026" +
    "\uffc9\034\162\035\167\037\165\041\164\001\002\000\004" +
    "\025\212\001\002\000\004\021\203\001\002\000\004\026" +
    "\202\001\002\000\004\021\170\001\002\000\032\004\046" +
    "\007\040\010\036\011\054\012\053\013\043\021\042\023" +
    "\045\027\052\044\037\046\035\054\051\001\002\000\040" +
    "\017\070\022\172\043\064\045\067\046\057\047\073\050" +
    "\062\051\074\052\061\053\075\055\066\057\071\060\065" +
    "\061\063\062\060\001\002\000\004\025\173\001\002\000" +
    "\016\004\160\026\uffc9\034\162\035\167\037\165\041\164" +
    "\001\002\000\004\026\175\001\002\000\020\004\uffc5\026" +
    "\uffc5\034\uffc5\035\uffc5\036\176\037\uffc5\041\uffc5\001\002" +
    "\000\004\025\177\001\002\000\016\004\160\026\uffc9\034" +
    "\162\035\167\037\165\041\164\001\002\000\004\026\201" +
    "\001\002\000\016\004\uffc6\026\uffc6\034\uffc6\035\uffc6\037" +
    "\uffc6\041\uffc6\001\002\000\012\004\ufff6\025\ufff6\031\ufff6" +
    "\032\ufff6\001\002\000\032\004\046\007\040\010\036\011" +
    "\054\012\053\013\043\021\042\023\045\027\052\044\037" +
    "\046\035\054\051\001\002\000\040\017\070\022\205\043" +
    "\064\045\067\046\057\047\073\050\062\051\074\052\061" +
    "\053\075\055\066\057\071\060\065\061\063\062\060\001" +
    "\002\000\004\040\206\001\002\000\004\025\207\001\002" +
    "\000\016\004\160\026\uffc9\034\162\035\167\037\165\041" +
    "\164\001\002\000\004\026\211\001\002\000\016\004\uffc4" +
    "\026\uffc4\034\uffc4\035\uffc4\037\uffc4\041\uffc4\001\002\000" +
    "\016\004\160\026\uffc9\034\162\035\167\037\165\041\164" +
    "\001\002\000\004\026\214\001\002\000\004\042\215\001" +
    "\002\000\004\021\216\001\002\000\032\004\046\007\040" +
    "\010\036\011\054\012\053\013\043\021\042\023\045\027" +
    "\052\044\037\046\035\054\051\001\002\000\040\017\070" +
    "\022\220\043\064\045\067\046\057\047\073\050\062\051" +
    "\074\052\061\053\075\055\066\057\071\060\065\061\063" +
    "\062\060\001\002\000\004\014\221\001\002\000\016\004" +
    "\uffc3\026\uffc3\034\uffc3\035\uffc3\037\uffc3\041\uffc3\001\002" +
    "\000\004\026\uffca\001\002\000\052\004\uffc2\017\070\026" +
    "\uffc2\034\uffc2\035\uffc2\037\uffc2\041\uffc2\043\064\045\067" +
    "\046\057\047\073\050\062\051\074\052\061\053\075\055" +
    "\066\057\071\060\065\061\063\062\060\001\002\000\016" +
    "\004\uffc7\026\uffc7\034\uffc7\035\uffc7\037\uffc7\041\uffc7\001" +
    "\002\000\032\004\046\007\040\010\036\011\054\012\053" +
    "\013\043\021\042\023\045\027\052\044\037\046\035\054" +
    "\051\001\002\000\040\014\227\017\070\043\064\045\067" +
    "\046\057\047\073\050\062\051\074\052\061\053\075\055" +
    "\066\057\071\060\065\061\063\062\060\001\002\000\016" +
    "\004\uffc8\026\uffc8\034\uffc8\035\uffc8\037\uffc8\041\uffc8\001" +
    "\002\000\004\002\000\001\002\000\004\025\uffff\001\002" +
    "\000\016\004\160\026\uffc9\034\162\035\167\037\165\041" +
    "\164\001\002\000\004\026\234\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\016\002\006\003\003\004\005\005\004\007" +
    "\010\012\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\230\004\005\005\004\007\010\012\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\017\011\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\027\001\001\000" +
    "\002\001\001\000\004\013\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\043\016\046\017\047\022" +
    "\040\001\001\000\012\015\043\016\046\017\145\022\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\043\016\046\017\140" +
    "\022\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\136\015\043\016\046\017\055\022\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\043\016\046\017\115\022\040\001\001\000\014" +
    "\014\054\015\043\016\046\017\055\022\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\043\016\046\017\113\022\040\001" +
    "\001\000\012\015\043\016\046\017\112\022\040\001\001" +
    "\000\012\015\043\016\046\017\111\022\040\001\001\000" +
    "\012\015\043\016\046\017\110\022\040\001\001\000\012" +
    "\015\043\016\046\017\107\022\040\001\001\000\012\015" +
    "\043\016\046\017\106\022\040\001\001\000\012\015\043" +
    "\016\046\017\105\022\040\001\001\000\012\015\043\016" +
    "\046\017\104\022\040\001\001\000\012\015\043\016\046" +
    "\017\103\022\040\001\001\000\012\015\043\016\046\017" +
    "\102\022\040\001\001\000\012\015\043\016\046\017\101" +
    "\022\040\001\001\000\014\014\100\015\043\016\046\017" +
    "\055\022\040\001\001\000\012\015\043\016\046\017\077" +
    "\022\040\001\001\000\012\015\043\016\046\017\076\022" +
    "\040\001\001\000\012\015\043\016\046\017\075\022\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\134" +
    "\015\043\016\046\017\055\022\040\001\001\000\012\015" +
    "\043\016\046\017\124\022\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\043\016\046\017\132\022" +
    "\040\001\001\000\002\001\001\000\012\015\043\016\046" +
    "\017\130\022\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\150" +
    "\011\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\153\013\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\162\021\165\022" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\043\016\046\017\222\022\040\001\001\000\010\020" +
    "\162\021\221\022\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\043\016\046\017\170\022\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\162\021\173\022\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\162\021\177\022\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\043" +
    "\016\046\017\203\022\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\162\021\207" +
    "\022\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\162\021\212\022\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\043\016" +
    "\046\017\216\022\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\043\016\046\017\225" +
    "\022\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\162\021\232" +
    "\022\160\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$QCup$actions {
  private final QCup parser;

  /** Constructor */
  CUP$QCup$actions(QCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$QCup$do_action(
    int                        CUP$QCup$act_num,
    java_cup.runtime.lr_parser CUP$QCup$parser,
    java.util.Stack            CUP$QCup$stack,
    int                        CUP$QCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QCup$result;

      /* select the action based on the action number */
      switch (CUP$QCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= RETURN expr 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ReturnNode(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= REPEAT CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE UNTIL BRACKETOPEN expr BRACKETCLOSE SEMICOLON 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		LinkedList<StatementNode> s = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		 RESULT = new RepeatNode(s, c); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= WHILE BRACKETOPEN expr BRACKETCLOSE DO CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> s = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new WhileNode(c, s); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-7)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= IF BRACKETOPEN expr BRACKETCLOSE CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> t = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IfNode(c, t); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= IF BRACKETOPEN expr BRACKETCLOSE CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE ELSE CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		LinkedList<StatementNode> t = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> f = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IfNode(c, t, f); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-10)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= functioncall SEMICOLON 
            {
              StatementNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		FunctionCallNode f = (FunctionCallNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FunctionCallStatementNode(f); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= ID EQUALS expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode v = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new AssignmentNode(id,v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statementlist ::= 
            {
              LinkedList<StatementNode> RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementlist",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statementlist ::= statement statementlist 
            {
              LinkedList<StatementNode> RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementlist",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tuple ::= TUPLELEFT exprlist TUPLERIGHT 
            {
              TupleNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> l = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new TupleNode(l); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tuple",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list ::= SQUAREBRACKETOPEN exprlist SQUAREBRACKETCLOSE 
            {
              ListNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> l = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ListNode(l); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("list",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exprlist ::= expr 
            {
              LinkedList<ExprNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 LinkedList<ExprNode> expressions = new LinkedList<ExprNode>(); expressions.addFirst(e); RESULT=expressions; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exprlist",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exprlist ::= expr COMMA exprlist 
            {
              LinkedList<ExprNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ExprNode> r = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 r.addFirst(e); RESULT = r; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exprlist",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= ID DOT ID 
            {
              ExprNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new FieldNode(var, field); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= ID SQUAREBRACKETOPEN expr COLON expr SQUAREBRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode j = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IndexRangeNode(id, i, j); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= ID SQUAREBRACKETOPEN COLON expr SQUAREBRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode j = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IndexRangeNode(id, null, j); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= ID SQUAREBRACKETOPEN expr COLON SQUAREBRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		 RESULT = new IndexRangeNode(id, i, null); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= ID SQUAREBRACKETOPEN expr SQUAREBRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new IndexNode(id, i); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr CONCAT expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ConcatNode(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= CHAR 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new CharNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= tuple 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		TupleNode v = (TupleNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= list 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ListNode v = (ListNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= STRING 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new StringNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= NOT expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NotNode(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr AND expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new AndNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr OR expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new OrNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= BOOL 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new BoolNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr EQUALSCOMPARISON expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new EqualsNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr GREATER expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new GreaterNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr LESS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new LessNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr GREATEREQUALS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new GreaterEqualsNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr LESSEQUALS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new LessEqualsNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr POWER expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new PowerNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr DIVIDE expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new DivideNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr TIMES expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new TimesNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= MINUS expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NegativeNode(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MINUS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new MinusNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr PLUS expr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new PlusNode(l,r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= FLOAT 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		float v = (float)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new FloatNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= INT 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IntNode(v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= BRACKETOPEN expr BRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr IN expr 
            {
              ExprNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ExprNode n = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ExprNode h = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new InNode(n, h); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LEN BRACKETOPEN ID BRACKETCLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new LengthNode(id); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= functioncall 
            {
              ExprNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		FunctionCallNode f = (FunctionCallNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = f; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // functioncall ::= ID BRACKETOPEN exprlist BRACKETCLOSE 
            {
              FunctionCallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ExprNode> args = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FunctionCallNode(id, args); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("functioncall",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= CUSTOMTYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = t; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = t; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tdef ::= TDEF ID COLON arglist SEMICOLON 
            {
              TDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<ArgNode> fields = (LinkedList<ArgNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new TDefNode(id, fields); 
					   ((QLex) parser.getScanner()).addType(id); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tdef",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arglist ::= 
            {
              LinkedList<ArgNode> RESULT =null;
		RESULT = new LinkedList<ArgNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("arglist",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arglist ::= nonemptyarglist 
            {
              LinkedList<ArgNode> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ArgNode> args = (LinkedList<ArgNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = args; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("arglist",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nonemptyarglist ::= ID COLON type 
            {
              LinkedList<ArgNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 LinkedList<ArgNode> args = new LinkedList<ArgNode>(); args.addFirst(new ArgNode(id,t)); RESULT=args; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("nonemptyarglist",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nonemptyarglist ::= ID COLON type COMMA nonemptyarglist 
            {
              LinkedList<ArgNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<ArgNode> r = (LinkedList<ArgNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 r.addFirst(new ArgNode(id,t)); RESULT = r; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("nonemptyarglist",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fdef ::= FDEF ID BRACKETOPEN arglist BRACKETCLOSE COLON ftype CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              FDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		LinkedList<ArgNode> args = (LinkedList<ArgNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> s = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FDefNode(id, args, t); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fdef",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-9)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ftype ::= VOID 
            {
              String RESULT =null;
		 RESULT = "void"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ftype",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ftype ::= type 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = t; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ftype",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vardef ::= ID COLON type SEMICOLON 
            {
              VarDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new VarDefNode(id, t); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("vardef",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // vardef ::= ID COLON type EQUALS expr SEMICOLON 
            {
              VarDefNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ExprNode v = (ExprNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new VarDefNode(id, t, v); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("vardef",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= tdef 
            {
              DecNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		TDefNode d = (TDefNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = d; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= fdef 
            {
              DecNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		FDefNode d = (FDefNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = d; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= vardef 
            {
              DecNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		VarDefNode d = (VarDefNode)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = d; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declist ::= 
            {
              LinkedList<DecNode> RESULT =null;
		 RESULT = new LinkedList<DecNode>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declist",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declist ::= dec declist 
            {
              LinkedList<DecNode> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		DecNode d = (DecNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		LinkedList<DecNode> r = (LinkedList<DecNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 r.addFirst(d); RESULT = r; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declist",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		RESULT = start_val;
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QCup$parser.done_parsing();
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declist CURLYBRACKETOPEN statementlist CURLYBRACKETCLOSE 
            {
              ProgramNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		LinkedList<DecNode> d = (LinkedList<DecNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		LinkedList<StatementNode> s = (LinkedList<StatementNode>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ProgramNode(d,s); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

