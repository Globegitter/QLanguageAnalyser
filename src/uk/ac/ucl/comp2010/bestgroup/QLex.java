/* The following code was generated by JFlex 1.4.3 on 18/03/13 10:13 */

package uk.ac.ucl.comp2010.bestgroup;

import java_cup.runtime.*;
import java.io.IOException;

import uk.ac.ucl.comp2010.bestgroup.QSym;
import static uk.ac.ucl.comp2010.bestgroup.QSym.*;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/03/13 10:13 from the specification file
 * <tt>C:/Users/Luke/workspace/QLanguageAnalyser/src/Q.lex</tt>
 */
public final class QLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\23\1\1\1\36\1\0\1\1\1\36\16\23\4\0\1\6\1\37"+
    "\1\10\1\5\1\24\1\5\1\41\1\7\1\53\1\54\1\43\1\42"+
    "\1\52\1\3\1\4\1\35\12\2\1\51\1\50\1\45\1\46\1\47"+
    "\1\0\1\5\32\21\1\55\1\0\1\56\1\44\1\24\1\0\1\16"+
    "\1\25\1\31\1\62\1\14\1\15\1\33\1\32\1\27\2\21\1\17"+
    "\1\21\1\30\1\26\1\34\1\21\1\12\1\20\1\11\1\13\1\22"+
    "\1\61\3\21\1\57\1\40\1\60\1\0\41\23\2\0\4\23\4\0"+
    "\1\23\2\0\1\23\7\0\1\23\4\0\1\23\5\0\27\23\1\0"+
    "\37\23\1\0\u01ca\23\4\0\14\23\16\0\5\23\7\0\1\23\1\0"+
    "\1\23\21\0\165\23\1\0\2\23\2\0\4\23\10\0\1\23\1\0"+
    "\3\23\1\0\1\23\1\0\24\23\1\0\123\23\1\0\213\23\1\0"+
    "\5\23\2\0\236\23\11\0\46\23\2\0\1\23\7\0\47\23\11\0"+
    "\55\23\1\0\1\23\1\0\2\23\1\0\2\23\1\0\1\23\10\0"+
    "\33\23\5\0\3\23\15\0\4\23\7\0\1\23\4\0\13\23\5\0"+
    "\112\23\4\0\146\23\1\0\11\23\1\0\12\23\1\0\23\23\2\0"+
    "\1\23\17\0\74\23\2\0\145\23\16\0\66\23\4\0\1\23\5\0"+
    "\56\23\22\0\34\23\244\0\144\23\2\0\12\23\1\0\7\23\1\0"+
    "\7\23\1\0\3\23\1\0\10\23\2\0\2\23\2\0\26\23\1\0"+
    "\7\23\1\0\1\23\3\0\4\23\2\0\11\23\2\0\2\23\2\0"+
    "\4\23\10\0\1\23\4\0\2\23\1\0\5\23\2\0\16\23\7\0"+
    "\1\23\5\0\3\23\1\0\6\23\4\0\2\23\2\0\26\23\1\0"+
    "\7\23\1\0\2\23\1\0\2\23\1\0\2\23\2\0\1\23\1\0"+
    "\5\23\4\0\2\23\2\0\3\23\3\0\1\23\7\0\4\23\1\0"+
    "\1\23\7\0\20\23\13\0\3\23\1\0\11\23\1\0\3\23\1\0"+
    "\26\23\1\0\7\23\1\0\2\23\1\0\5\23\2\0\12\23\1\0"+
    "\3\23\1\0\3\23\2\0\1\23\17\0\4\23\2\0\12\23\1\0"+
    "\1\23\17\0\3\23\1\0\10\23\2\0\2\23\2\0\26\23\1\0"+
    "\7\23\1\0\2\23\1\0\5\23\2\0\11\23\2\0\2\23\2\0"+
    "\3\23\10\0\2\23\4\0\2\23\1\0\5\23\2\0\12\23\1\0"+
    "\1\23\20\0\2\23\1\0\6\23\3\0\3\23\1\0\4\23\3\0"+
    "\2\23\1\0\1\23\1\0\2\23\3\0\2\23\3\0\3\23\3\0"+
    "\14\23\4\0\5\23\3\0\3\23\1\0\4\23\2\0\1\23\6\0"+
    "\1\23\16\0\12\23\11\0\1\23\7\0\3\23\1\0\10\23\1\0"+
    "\3\23\1\0\27\23\1\0\12\23\1\0\5\23\3\0\10\23\1\0"+
    "\3\23\1\0\4\23\7\0\2\23\1\0\2\23\6\0\4\23\2\0"+
    "\12\23\22\0\2\23\1\0\10\23\1\0\3\23\1\0\27\23\1\0"+
    "\12\23\1\0\5\23\2\0\11\23\1\0\3\23\1\0\4\23\7\0"+
    "\2\23\7\0\1\23\1\0\4\23\2\0\12\23\1\0\2\23\17\0"+
    "\2\23\1\0\10\23\1\0\3\23\1\0\51\23\2\0\10\23\1\0"+
    "\3\23\1\0\5\23\10\0\1\23\10\0\4\23\2\0\12\23\12\0"+
    "\6\23\2\0\2\23\1\0\22\23\3\0\30\23\1\0\11\23\1\0"+
    "\1\23\2\0\7\23\3\0\1\23\4\0\6\23\1\0\1\23\1\0"+
    "\10\23\22\0\2\23\15\0\72\23\4\0\20\23\1\0\12\23\47\0"+
    "\2\23\1\0\1\23\2\0\2\23\1\0\1\23\2\0\1\23\6\0"+
    "\4\23\1\0\7\23\1\0\3\23\1\0\1\23\1\0\1\23\2\0"+
    "\2\23\1\0\15\23\1\0\3\23\2\0\5\23\1\0\1\23\1\0"+
    "\6\23\2\0\12\23\2\0\2\23\42\0\1\23\27\0\2\23\6\0"+
    "\12\23\13\0\1\23\1\0\1\23\1\0\1\23\4\0\12\23\1\0"+
    "\44\23\4\0\24\23\1\0\22\23\1\0\44\23\11\0\1\23\71\0"+
    "\112\23\6\0\116\23\2\0\46\23\12\0\53\23\1\0\1\23\3\0"+
    "\u0149\23\1\0\4\23\2\0\7\23\1\0\1\23\1\0\4\23\2\0"+
    "\51\23\1\0\4\23\2\0\41\23\1\0\4\23\2\0\7\23\1\0"+
    "\1\23\1\0\4\23\2\0\17\23\1\0\71\23\1\0\4\23\2\0"+
    "\103\23\2\0\3\23\40\0\20\23\20\0\125\23\14\0\u026c\23\2\0"+
    "\21\23\1\0\32\23\5\0\113\23\3\0\3\23\17\0\15\23\1\0"+
    "\7\23\13\0\25\23\13\0\24\23\14\0\15\23\1\0\3\23\1\0"+
    "\2\23\14\0\124\23\3\0\1\23\3\0\3\23\2\0\12\23\41\0"+
    "\3\23\2\0\12\23\6\0\130\23\10\0\53\23\5\0\106\23\12\0"+
    "\35\23\3\0\14\23\4\0\14\23\12\0\50\23\2\0\5\23\13\0"+
    "\54\23\4\0\32\23\6\0\12\23\46\0\34\23\4\0\77\23\1\0"+
    "\35\23\2\0\13\23\6\0\12\23\15\0\1\23\130\0\114\23\4\0"+
    "\12\23\21\0\11\23\14\0\53\23\3\0\14\23\6\0\64\23\14\0"+
    "\70\23\10\0\12\23\3\0\61\23\122\0\3\23\1\0\37\23\15\0"+
    "\347\23\25\0\u011a\23\2\0\6\23\2\0\46\23\2\0\6\23\2\0"+
    "\10\23\1\0\1\23\1\0\1\23\1\0\1\23\1\0\37\23\2\0"+
    "\65\23\1\0\7\23\1\0\1\23\3\0\3\23\1\0\7\23\3\0"+
    "\4\23\2\0\6\23\4\0\15\23\5\0\3\23\1\0\7\23\16\0"+
    "\5\23\32\0\5\23\20\0\2\23\23\0\1\23\13\0\5\23\5\0"+
    "\6\23\1\0\1\23\15\0\1\23\20\0\15\23\3\0\32\23\26\0"+
    "\15\23\4\0\1\23\3\0\14\23\21\0\1\23\4\0\1\23\2\0"+
    "\12\23\1\0\1\23\3\0\5\23\6\0\1\23\1\0\1\23\1\0"+
    "\1\23\1\0\4\23\1\0\13\23\2\0\4\23\5\0\5\23\4\0"+
    "\1\23\21\0\51\23\u0a77\0\57\23\1\0\57\23\1\0\205\23\6\0"+
    "\7\23\16\0\46\23\12\0\66\23\11\0\1\23\17\0\30\23\11\0"+
    "\7\23\1\0\7\23\1\0\7\23\1\0\7\23\1\0\7\23\1\0"+
    "\7\23\1\0\7\23\1\0\7\23\1\0\40\23\57\0\1\23\u01d5\0"+
    "\3\23\31\0\17\23\1\0\5\23\2\0\5\23\4\0\126\23\2\0"+
    "\2\23\2\0\3\23\1\0\132\23\1\0\4\23\5\0\51\23\3\0"+
    "\136\23\21\0\33\23\65\0\20\23\u0200\0\u19b6\23\112\0\u51cc\23\64\0"+
    "\u048d\23\103\0\56\23\2\0\u010d\23\3\0\34\23\24\0\60\23\14\0"+
    "\2\23\1\0\31\23\10\0\122\23\45\0\11\23\2\0\147\23\2\0"+
    "\4\23\1\0\2\23\16\0\12\23\120\0\56\23\20\0\1\23\7\0"+
    "\64\23\14\0\105\23\13\0\12\23\6\0\30\23\3\0\1\23\4\0"+
    "\56\23\2\0\44\23\14\0\35\23\3\0\101\23\16\0\13\23\46\0"+
    "\67\23\11\0\16\23\2\0\12\23\6\0\27\23\3\0\2\23\4\0"+
    "\103\23\30\0\3\23\43\0\6\23\2\0\6\23\2\0\6\23\11\0"+
    "\7\23\1\0\7\23\221\0\53\23\1\0\2\23\2\0\12\23\6\0"+
    "\u2ba4\23\14\0\27\23\4\0\61\23\u2104\0\u012e\23\2\0\76\23\2\0"+
    "\152\23\46\0\7\23\14\0\5\23\5\0\14\23\1\0\15\23\1\0"+
    "\5\23\1\0\1\23\1\0\2\23\1\0\2\23\1\0\154\23\41\0"+
    "\u016b\23\22\0\100\23\2\0\66\23\50\0\15\23\3\0\20\23\20\0"+
    "\7\23\14\0\2\23\30\0\3\23\31\0\1\23\6\0\5\23\1\0"+
    "\207\23\2\0\1\23\4\0\1\23\13\0\12\23\7\0\32\23\4\0"+
    "\1\23\1\0\32\23\13\0\131\23\3\0\6\23\2\0\6\23\2\0"+
    "\6\23\2\0\3\23\3\0\2\23\3\0\2\23\22\0\3\23\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\1\1\3\1\4\1\5\2\2"+
    "\14\6\1\7\1\10\2\2\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\6\2\30\3\0\1\31\14\6"+
    "\1\32\1\33\1\6\1\0\1\34\1\10\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\6\1\45"+
    "\1\46\1\47\1\50\1\0\15\6\1\51\1\6\1\52"+
    "\1\6\1\53\1\6\1\54\3\6\1\55\1\6\1\56"+
    "\4\6\1\57\1\60\1\6\1\61\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\146\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\146\0\146\0\146\0\u04c8\0\u04fb\0\u052e\0\146"+
    "\0\u0561\0\146\0\146\0\146\0\u0594\0\146\0\146\0\146"+
    "\0\u05c7\0\u05fa\0\146\0\u062d\0\u0660\0\u0693\0\u06c6\0\146"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e"+
    "\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u0297\0\u095d\0\u0990\0\u09c3"+
    "\0\146\0\146\0\146\0\146\0\146\0\146\0\146\0\146"+
    "\0\146\0\146\0\u09f6\0\u0297\0\146\0\u0660\0\146\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u095d\0\u0c5a\0\u0c8d\0\u0297\0\u0cc0\0\146"+
    "\0\u0cf3\0\u0297\0\u0d26\0\u0297\0\u0d59\0\u0d8c\0\u0dbf\0\u0297"+
    "\0\u0df2\0\u0297\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0297\0\u0297"+
    "\0\u0ef1\0\u0297\0\u0297\0\u0297";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\17\1\22\2\3\1\23\1\17\1\24\1\17"+
    "\1\25\3\17\1\26\1\4\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\43\53\1\54\17\53\64\0\1\4\4\0\1\4\13\0"+
    "\1\4\13\0\1\4\26\0\1\5\1\0\1\55\60\0"+
    "\1\5\62\0\2\56\1\0\2\56\2\0\12\56\1\0"+
    "\11\56\2\0\1\56\1\0\4\56\5\0\3\56\4\0"+
    "\2\56\2\0\2\57\1\0\2\57\1\0\1\60\12\57"+
    "\1\0\11\57\2\0\1\57\1\0\4\57\5\0\3\57"+
    "\4\0\2\57\2\0\1\17\6\0\1\17\1\61\1\62"+
    "\21\17\24\0\1\17\1\63\2\0\1\17\6\0\3\17"+
    "\1\64\20\17\24\0\2\17\2\0\1\17\6\0\17\17"+
    "\1\65\4\17\24\0\2\17\2\0\1\17\6\0\6\17"+
    "\1\66\15\17\24\0\2\17\2\0\1\17\6\0\5\17"+
    "\1\67\1\70\15\17\24\0\1\17\1\71\2\0\1\17"+
    "\6\0\24\17\24\0\2\17\2\0\1\17\6\0\16\17"+
    "\1\72\5\17\24\0\2\17\2\0\1\17\6\0\1\73"+
    "\23\17\24\0\2\17\1\0\1\4\1\17\3\0\1\4"+
    "\2\0\11\17\1\22\12\17\1\0\1\4\22\0\2\17"+
    "\2\0\1\17\6\0\15\17\1\74\6\17\24\0\2\17"+
    "\2\0\1\17\6\0\4\17\1\75\12\17\1\76\4\17"+
    "\24\0\2\17\2\0\1\17\6\0\21\17\1\77\2\17"+
    "\24\0\2\17\35\0\1\100\5\0\1\101\65\0\1\102"+
    "\54\0\1\103\15\0\1\104\45\0\1\105\67\0\1\106"+
    "\62\0\1\107\62\0\1\110\65\0\1\111\51\0\1\112"+
    "\24\0\1\17\6\0\21\17\1\113\2\17\24\0\2\17"+
    "\2\0\1\17\6\0\15\17\1\114\6\17\24\0\2\17"+
    "\35\0\1\115\27\0\1\116\67\0\1\117\55\0\2\120"+
    "\1\0\2\120\1\0\1\117\12\120\1\0\11\120\2\0"+
    "\1\120\1\0\4\120\5\0\3\120\4\0\2\120\2\0"+
    "\1\17\6\0\2\17\1\121\21\17\24\0\2\17\2\0"+
    "\1\17\6\0\23\17\1\122\24\0\2\17\2\0\1\17"+
    "\6\0\3\17\1\123\20\17\24\0\2\17\2\0\1\17"+
    "\6\0\1\124\22\17\1\125\24\0\2\17\2\0\1\17"+
    "\6\0\1\126\23\17\24\0\2\17\2\0\1\17\6\0"+
    "\7\17\1\127\14\17\24\0\2\17\2\0\1\17\6\0"+
    "\6\17\1\130\15\17\24\0\2\17\2\0\1\17\6\0"+
    "\15\17\1\131\6\17\24\0\2\17\2\0\1\17\6\0"+
    "\3\17\1\132\20\17\24\0\2\17\2\0\1\17\6\0"+
    "\7\17\1\133\14\17\24\0\2\17\2\0\1\17\6\0"+
    "\1\17\1\134\22\17\24\0\2\17\2\0\1\17\6\0"+
    "\15\17\1\135\6\17\24\0\2\17\2\0\1\17\6\0"+
    "\1\136\23\17\24\0\2\17\2\0\1\17\6\0\5\17"+
    "\1\137\16\17\24\0\2\17\36\100\1\140\24\100\2\0"+
    "\1\17\6\0\16\17\1\141\5\17\24\0\2\17\2\0"+
    "\2\120\1\0\2\120\1\0\1\60\12\120\1\0\11\120"+
    "\2\0\1\120\1\0\4\120\5\0\3\120\4\0\2\120"+
    "\2\0\1\17\6\0\3\17\1\142\20\17\24\0\2\17"+
    "\2\0\1\17\6\0\6\17\1\143\15\17\24\0\2\17"+
    "\2\0\1\17\6\0\4\17\1\144\17\17\24\0\2\17"+
    "\2\0\1\17\6\0\2\17\1\145\21\17\24\0\2\17"+
    "\2\0\1\17\6\0\3\17\1\146\20\17\24\0\2\17"+
    "\2\0\1\17\6\0\16\17\1\147\5\17\24\0\2\17"+
    "\2\0\1\17\6\0\3\17\1\150\20\17\24\0\2\17"+
    "\2\0\1\17\6\0\7\17\1\151\14\17\24\0\2\17"+
    "\2\0\1\17\6\0\5\17\1\133\16\17\24\0\2\17"+
    "\2\0\1\17\6\0\4\17\1\152\17\17\24\0\2\17"+
    "\2\0\1\17\6\0\16\17\1\153\5\17\24\0\2\17"+
    "\2\0\1\17\6\0\6\17\1\136\15\17\24\0\2\17"+
    "\2\0\1\17\6\0\1\17\1\136\22\17\24\0\2\17"+
    "\2\0\1\17\6\0\6\17\1\154\15\17\24\0\2\17"+
    "\2\0\1\17\6\0\3\17\1\136\20\17\24\0\2\17"+
    "\2\0\1\17\6\0\1\17\1\155\22\17\24\0\2\17"+
    "\2\0\1\17\6\0\5\17\1\156\16\17\24\0\2\17"+
    "\2\0\1\17\6\0\6\17\1\157\15\17\24\0\2\17"+
    "\2\0\1\17\6\0\3\17\1\160\20\17\24\0\2\17"+
    "\2\0\1\17\6\0\17\17\1\161\4\17\24\0\2\17"+
    "\2\0\1\17\6\0\3\17\1\162\20\17\24\0\2\17"+
    "\2\0\1\17\6\0\17\17\1\163\4\17\24\0\2\17"+
    "\2\0\1\17\6\0\1\164\23\17\24\0\2\17\2\0"+
    "\1\17\6\0\22\17\1\136\1\17\24\0\2\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3876];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\3\1\1\11\22\1\3\11\3\1"+
    "\1\11\1\1\3\11\1\1\3\11\2\1\1\11\1\1"+
    "\3\0\1\11\17\1\1\0\12\11\2\1\1\11\1\1"+
    "\1\11\1\0\17\1\1\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public String section = "Declarations";
	
	private LinkedList<String> extraTypes = new LinkedList<String>();
	private LinkedList<String> extraFunctions = new LinkedList<String>();
	
	public boolean addType(String type) {
		if(isType(type))
			return false;
		extraTypes.add(type);
		return true;
	}
	
	public boolean isType(String type) {
		if(extraTypes.indexOf(type)==-1)
			return false;
		return true;
	}
		
	private Symbol sym(int type)
	{
		return sym(type, yytext());
	}

	private Symbol sym(int type, Object value)
	{
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QLex(java.io.Reader in) {
  	
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public QLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1900) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { return sym(EQUALS);
          }
        case 52: break;
        case 33: 
          { return sym(EQUALSCOMPARISON);
          }
        case 53: break;
        case 50: 
          { return sym(RETURN);
          }
        case 54: break;
        case 35: 
          { return sym(CONCAT);
          }
        case 55: break;
        case 42: 
          { /* ignore comments*/
          }
        case 56: break;
        case 40: 
          { char[] chars = yytext().toCharArray(); return sym(CHAR, chars[1]);
          }
        case 57: break;
        case 2: 
          { System.err.println("Could not interpret character '" + yytext() + "' at line " + yyline + " (" + section + ")");
          }
        case 58: break;
        case 46: 
          { return sym(FDEF);
          }
        case 59: break;
        case 15: 
          { return sym(SEMICOLON);
          }
        case 60: break;
        case 9: 
          { return sym(PLUS);
          }
        case 61: break;
        case 19: 
          { return sym(BRACKETCLOSE);
          }
        case 62: break;
        case 12: 
          { return sym(LESS);
          }
        case 63: break;
        case 39: 
          { return sym(FLOAT, Float.parseFloat(yytext()));
          }
        case 64: break;
        case 18: 
          { return sym(BRACKETOPEN);
          }
        case 65: break;
        case 41: 
          { return sym(TYPE);
          }
        case 66: break;
        case 21: 
          { return sym(SQUAREBRACKETCLOSE);
          }
        case 67: break;
        case 45: 
          { return sym(ELSE);
          }
        case 68: break;
        case 20: 
          { return sym(SQUAREBRACKETOPEN);
          }
        case 69: break;
        case 6: 
          { if(isType(yytext())) {
								return sym(CUSTOMTYPE);				
							} else {
								return sym(ID);
							}
          }
        case 70: break;
        case 38: 
          { yybegin(YYINITIAL);
          }
        case 71: break;
        case 44: 
          { return sym(TDEF);
          }
        case 72: break;
        case 37: 
          { return sym(DO);
          }
        case 73: break;
        case 48: 
          { return sym(BOOL, false);
          }
        case 74: break;
        case 34: 
          { return sym(GREATEREQUALS);
          }
        case 75: break;
        case 36: 
          { return sym(TUPLELEFT);
          }
        case 76: break;
        case 28: 
          { yybegin(COMMENT);
          }
        case 77: break;
        case 32: 
          { return sym(LESSEQUALS);
          }
        case 78: break;
        case 26: 
          { return sym(IF);
          }
        case 79: break;
        case 1: 
          { /* ignore whitespace*/
          }
        case 80: break;
        case 10: 
          { return sym(TIMES);
          }
        case 81: break;
        case 5: 
          { return sym(DOT);
          }
        case 82: break;
        case 16: 
          { return sym(COLON);
          }
        case 83: break;
        case 29: 
          { return sym(OR);
          }
        case 84: break;
        case 27: 
          { return sym(IN);
          }
        case 85: break;
        case 30: 
          { return sym(TUPLERIGHT);
          }
        case 86: break;
        case 7: 
          { return sym(DIVIDE);
          }
        case 87: break;
        case 49: 
          { return sym(WHILE);
          }
        case 88: break;
        case 47: 
          { return sym(UNTIL);
          }
        case 89: break;
        case 22: 
          { return sym(CURLYBRACKETOPEN);
          }
        case 90: break;
        case 25: 
          { return sym(STRING, yytext().substring(1, yytext().length()-1));
          }
        case 91: break;
        case 51: 
          { return sym(REPEAT);
          }
        case 92: break;
        case 14: 
          { return sym(GREATER);
          }
        case 93: break;
        case 3: 
          { return sym(INT, Integer.parseInt(yytext()));
          }
        case 94: break;
        case 8: 
          { return sym(NOT);
          }
        case 95: break;
        case 31: 
          { return sym(AND);
          }
        case 96: break;
        case 4: 
          { return sym(MINUS);
          }
        case 97: break;
        case 23: 
          { return sym(CURLYBRACKETCLOSE);
          }
        case 98: break;
        case 43: 
          { return sym(BOOL, true);
          }
        case 99: break;
        case 17: 
          { return sym(COMMA);
          }
        case 100: break;
        case 11: 
          { return sym(POWER);
          }
        case 101: break;
        case 24: 
          { 
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(uk.ac.ucl.comp2010.bestgroup.QSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface uk.ac.ucl.comp2010.bestgroup.QSym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = uk.ac.ucl.comp2010.bestgroup.QSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java QLex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        QLex scanner = null;
        try {
          scanner = new QLex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
