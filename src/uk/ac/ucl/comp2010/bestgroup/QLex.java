/* The following code was generated by JFlex 1.4.3 on 17/03/13 22:07 */

package uk.ac.ucl.comp2010.bestgroup;

import java_cup.runtime.*;
import java.io.IOException;

import uk.ac.ucl.comp2010.bestgroup.QSym;
import static uk.ac.ucl.comp2010.bestgroup.QSym.*;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/03/13 22:07 from the specification file
 * <tt>C:/Users/Luke/workspace/QLanguageAnalyser/src/Q.lex</tt>
 */
public final class QLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\26\1\1\1\41\1\0\1\1\1\41\16\26\4\0\1\6\1\42"+
    "\1\10\1\5\1\27\1\5\1\44\1\7\1\53\1\54\1\46\1\45"+
    "\1\52\1\3\1\4\1\40\12\2\1\51\1\50\1\21\1\22\1\23"+
    "\1\0\1\5\32\24\1\55\1\0\1\56\1\47\1\27\1\0\1\16"+
    "\1\30\1\34\1\62\1\14\1\15\1\36\1\35\1\32\2\24\1\17"+
    "\1\24\1\33\1\31\1\37\1\24\1\12\1\20\1\11\1\13\1\25"+
    "\1\61\3\24\1\57\1\43\1\60\1\0\41\26\2\0\4\26\4\0"+
    "\1\26\2\0\1\26\7\0\1\26\4\0\1\26\5\0\27\26\1\0"+
    "\37\26\1\0\u01ca\26\4\0\14\26\16\0\5\26\7\0\1\26\1\0"+
    "\1\26\21\0\165\26\1\0\2\26\2\0\4\26\10\0\1\26\1\0"+
    "\3\26\1\0\1\26\1\0\24\26\1\0\123\26\1\0\213\26\1\0"+
    "\5\26\2\0\236\26\11\0\46\26\2\0\1\26\7\0\47\26\11\0"+
    "\55\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0\1\26\10\0"+
    "\33\26\5\0\3\26\15\0\4\26\7\0\1\26\4\0\13\26\5\0"+
    "\112\26\4\0\146\26\1\0\11\26\1\0\12\26\1\0\23\26\2\0"+
    "\1\26\17\0\74\26\2\0\145\26\16\0\66\26\4\0\1\26\5\0"+
    "\56\26\22\0\34\26\244\0\144\26\2\0\12\26\1\0\7\26\1\0"+
    "\7\26\1\0\3\26\1\0\10\26\2\0\2\26\2\0\26\26\1\0"+
    "\7\26\1\0\1\26\3\0\4\26\2\0\11\26\2\0\2\26\2\0"+
    "\4\26\10\0\1\26\4\0\2\26\1\0\5\26\2\0\16\26\7\0"+
    "\1\26\5\0\3\26\1\0\6\26\4\0\2\26\2\0\26\26\1\0"+
    "\7\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\26\1\0"+
    "\5\26\4\0\2\26\2\0\3\26\3\0\1\26\7\0\4\26\1\0"+
    "\1\26\7\0\20\26\13\0\3\26\1\0\11\26\1\0\3\26\1\0"+
    "\26\26\1\0\7\26\1\0\2\26\1\0\5\26\2\0\12\26\1\0"+
    "\3\26\1\0\3\26\2\0\1\26\17\0\4\26\2\0\12\26\1\0"+
    "\1\26\17\0\3\26\1\0\10\26\2\0\2\26\2\0\26\26\1\0"+
    "\7\26\1\0\2\26\1\0\5\26\2\0\11\26\2\0\2\26\2\0"+
    "\3\26\10\0\2\26\4\0\2\26\1\0\5\26\2\0\12\26\1\0"+
    "\1\26\20\0\2\26\1\0\6\26\3\0\3\26\1\0\4\26\3\0"+
    "\2\26\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26\3\0"+
    "\14\26\4\0\5\26\3\0\3\26\1\0\4\26\2\0\1\26\6\0"+
    "\1\26\16\0\12\26\11\0\1\26\7\0\3\26\1\0\10\26\1\0"+
    "\3\26\1\0\27\26\1\0\12\26\1\0\5\26\3\0\10\26\1\0"+
    "\3\26\1\0\4\26\7\0\2\26\1\0\2\26\6\0\4\26\2\0"+
    "\12\26\22\0\2\26\1\0\10\26\1\0\3\26\1\0\27\26\1\0"+
    "\12\26\1\0\5\26\2\0\11\26\1\0\3\26\1\0\4\26\7\0"+
    "\2\26\7\0\1\26\1\0\4\26\2\0\12\26\1\0\2\26\17\0"+
    "\2\26\1\0\10\26\1\0\3\26\1\0\51\26\2\0\10\26\1\0"+
    "\3\26\1\0\5\26\10\0\1\26\10\0\4\26\2\0\12\26\12\0"+
    "\6\26\2\0\2\26\1\0\22\26\3\0\30\26\1\0\11\26\1\0"+
    "\1\26\2\0\7\26\3\0\1\26\4\0\6\26\1\0\1\26\1\0"+
    "\10\26\22\0\2\26\15\0\72\26\4\0\20\26\1\0\12\26\47\0"+
    "\2\26\1\0\1\26\2\0\2\26\1\0\1\26\2\0\1\26\6\0"+
    "\4\26\1\0\7\26\1\0\3\26\1\0\1\26\1\0\1\26\2\0"+
    "\2\26\1\0\15\26\1\0\3\26\2\0\5\26\1\0\1\26\1\0"+
    "\6\26\2\0\12\26\2\0\2\26\42\0\1\26\27\0\2\26\6\0"+
    "\12\26\13\0\1\26\1\0\1\26\1\0\1\26\4\0\12\26\1\0"+
    "\44\26\4\0\24\26\1\0\22\26\1\0\44\26\11\0\1\26\71\0"+
    "\112\26\6\0\116\26\2\0\46\26\12\0\53\26\1\0\1\26\3\0"+
    "\u0149\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0"+
    "\51\26\1\0\4\26\2\0\41\26\1\0\4\26\2\0\7\26\1\0"+
    "\1\26\1\0\4\26\2\0\17\26\1\0\71\26\1\0\4\26\2\0"+
    "\103\26\2\0\3\26\40\0\20\26\20\0\125\26\14\0\u026c\26\2\0"+
    "\21\26\1\0\32\26\5\0\113\26\3\0\3\26\17\0\15\26\1\0"+
    "\7\26\13\0\25\26\13\0\24\26\14\0\15\26\1\0\3\26\1\0"+
    "\2\26\14\0\124\26\3\0\1\26\3\0\3\26\2\0\12\26\41\0"+
    "\3\26\2\0\12\26\6\0\130\26\10\0\53\26\5\0\106\26\12\0"+
    "\35\26\3\0\14\26\4\0\14\26\12\0\50\26\2\0\5\26\13\0"+
    "\54\26\4\0\32\26\6\0\12\26\46\0\34\26\4\0\77\26\1\0"+
    "\35\26\2\0\13\26\6\0\12\26\15\0\1\26\130\0\114\26\4\0"+
    "\12\26\21\0\11\26\14\0\53\26\3\0\14\26\6\0\64\26\14\0"+
    "\70\26\10\0\12\26\3\0\61\26\122\0\3\26\1\0\37\26\15\0"+
    "\347\26\25\0\u011a\26\2\0\6\26\2\0\46\26\2\0\6\26\2\0"+
    "\10\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\37\26\2\0"+
    "\65\26\1\0\7\26\1\0\1\26\3\0\3\26\1\0\7\26\3\0"+
    "\4\26\2\0\6\26\4\0\15\26\5\0\3\26\1\0\7\26\16\0"+
    "\5\26\32\0\5\26\20\0\2\26\23\0\1\26\13\0\5\26\5\0"+
    "\6\26\1\0\1\26\15\0\1\26\20\0\15\26\3\0\32\26\26\0"+
    "\15\26\4\0\1\26\3\0\14\26\21\0\1\26\4\0\1\26\2\0"+
    "\12\26\1\0\1\26\3\0\5\26\6\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\1\0\13\26\2\0\4\26\5\0\5\26\4\0"+
    "\1\26\21\0\51\26\u0a77\0\57\26\1\0\57\26\1\0\205\26\6\0"+
    "\7\26\16\0\46\26\12\0\66\26\11\0\1\26\17\0\30\26\11\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\40\26\57\0\1\26\u01d5\0"+
    "\3\26\31\0\17\26\1\0\5\26\2\0\5\26\4\0\126\26\2\0"+
    "\2\26\2\0\3\26\1\0\132\26\1\0\4\26\5\0\51\26\3\0"+
    "\136\26\21\0\33\26\65\0\20\26\u0200\0\u19b6\26\112\0\u51cc\26\64\0"+
    "\u048d\26\103\0\56\26\2\0\u010d\26\3\0\34\26\24\0\60\26\14\0"+
    "\2\26\1\0\31\26\10\0\122\26\45\0\11\26\2\0\147\26\2\0"+
    "\4\26\1\0\2\26\16\0\12\26\120\0\56\26\20\0\1\26\7\0"+
    "\64\26\14\0\105\26\13\0\12\26\6\0\30\26\3\0\1\26\4\0"+
    "\56\26\2\0\44\26\14\0\35\26\3\0\101\26\16\0\13\26\46\0"+
    "\67\26\11\0\16\26\2\0\12\26\6\0\27\26\3\0\2\26\4\0"+
    "\103\26\30\0\3\26\43\0\6\26\2\0\6\26\2\0\6\26\11\0"+
    "\7\26\1\0\7\26\221\0\53\26\1\0\2\26\2\0\12\26\6\0"+
    "\u2ba4\26\14\0\27\26\4\0\61\26\u2104\0\u012e\26\2\0\76\26\2\0"+
    "\152\26\46\0\7\26\14\0\5\26\5\0\14\26\1\0\15\26\1\0"+
    "\5\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0\154\26\41\0"+
    "\u016b\26\22\0\100\26\2\0\66\26\50\0\15\26\3\0\20\26\20\0"+
    "\7\26\14\0\2\26\30\0\3\26\31\0\1\26\6\0\5\26\1\0"+
    "\207\26\2\0\1\26\4\0\1\26\13\0\12\26\7\0\32\26\4\0"+
    "\1\26\1\0\32\26\13\0\131\26\3\0\6\26\2\0\6\26\2\0"+
    "\6\26\2\0\3\26\3\0\2\26\3\0\2\26\22\0\3\26\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\2\1\3\1\4\2\0\10\5"+
    "\1\6\1\7\1\10\4\5\1\11\1\12\2\0\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\5\2\27\3\0\1\30\13\5"+
    "\1\31\1\32\1\33\1\5\1\34\1\35\1\5\1\0"+
    "\1\36\1\12\1\37\1\40\1\41\1\42\1\5\1\43"+
    "\1\44\1\45\1\46\1\0\15\5\1\47\1\5\1\50"+
    "\1\5\1\51\1\5\1\52\3\5\1\53\1\5\1\54"+
    "\4\5\1\55\1\56\1\5\1\57\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\377\0\377\0\377\0\377\0\377"+
    "\0\377\0\377\0\377\0\u0561\0\377\0\377\0\377\0\u0594"+
    "\0\u05c7\0\377\0\u05fa\0\u062d\0\u0660\0\u0693\0\377\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e"+
    "\0\u0891\0\u08c4\0\377\0\377\0\377\0\u08f7\0\u0297\0\u092a"+
    "\0\u095d\0\u0990\0\377\0\377\0\377\0\377\0\377\0\377"+
    "\0\u09c3\0\u0297\0\377\0\u062d\0\377\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u092a\0\u0c27\0\u0c5a\0\u0297\0\u0c8d\0\377\0\u0cc0\0\u0297"+
    "\0\u0cf3\0\u0297\0\u0d26\0\u0d59\0\u0d8c\0\u0297\0\u0dbf\0\u0297"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0297\0\u0297\0\u0ebe\0\u0297"+
    "\0\u0297\0\u0297";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\0\1\3\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\16\1\24\2\0\1\25"+
    "\1\16\1\26\1\16\1\27\3\16\1\30\1\3\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\46\52\1\53\14\52\1\0\1\3\4\0\1\3\16\0"+
    "\1\3\13\0\1\3\23\0\1\4\1\0\1\54\60\0"+
    "\1\4\145\0\2\55\1\0\2\55\2\0\10\55\3\0"+
    "\2\55\1\0\11\55\2\0\1\55\1\0\4\55\2\0"+
    "\3\55\4\0\2\55\2\0\2\56\1\0\2\56\1\0"+
    "\1\57\10\56\3\0\2\56\1\0\11\56\2\0\1\56"+
    "\1\0\4\56\2\0\3\56\4\0\2\56\2\0\1\16"+
    "\6\0\1\16\1\60\1\61\5\16\3\0\14\16\21\0"+
    "\1\16\1\62\2\0\1\16\6\0\3\16\1\63\4\16"+
    "\3\0\14\16\21\0\2\16\2\0\1\16\6\0\10\16"+
    "\3\0\7\16\1\64\4\16\21\0\2\16\2\0\1\16"+
    "\6\0\6\16\1\65\1\16\3\0\14\16\21\0\2\16"+
    "\2\0\1\16\6\0\5\16\1\66\1\67\1\16\3\0"+
    "\14\16\21\0\1\16\1\70\2\0\1\16\6\0\10\16"+
    "\3\0\14\16\21\0\2\16\2\0\1\16\6\0\10\16"+
    "\3\0\6\16\1\71\5\16\21\0\2\16\2\0\1\16"+
    "\6\0\1\72\7\16\3\0\14\16\21\0\2\16\22\0"+
    "\1\73\62\0\1\74\62\0\1\75\41\0\1\3\1\16"+
    "\3\0\1\3\2\0\10\16\3\0\1\16\1\24\12\16"+
    "\1\0\1\3\17\0\2\16\2\0\1\16\6\0\10\16"+
    "\3\0\5\16\1\76\6\16\21\0\2\16\2\0\1\16"+
    "\6\0\4\16\1\77\3\16\3\0\7\16\1\100\4\16"+
    "\21\0\2\16\2\0\1\16\6\0\10\16\3\0\11\16"+
    "\1\101\2\16\21\0\2\16\40\0\1\102\5\0\1\103"+
    "\36\0\1\104\103\0\1\105\12\0\1\106\50\0\1\107"+
    "\61\0\1\110\21\0\1\16\6\0\10\16\3\0\11\16"+
    "\1\111\2\16\21\0\2\16\2\0\1\16\6\0\10\16"+
    "\3\0\5\16\1\112\6\16\21\0\2\16\40\0\1\113"+
    "\24\0\1\114\67\0\1\115\55\0\2\116\1\0\2\116"+
    "\1\0\1\115\10\116\3\0\2\116\1\0\11\116\2\0"+
    "\1\116\1\0\4\116\2\0\3\116\4\0\2\116\2\0"+
    "\1\16\6\0\2\16\1\117\5\16\3\0\14\16\21\0"+
    "\2\16\2\0\1\16\6\0\10\16\3\0\13\16\1\120"+
    "\21\0\2\16\2\0\1\16\6\0\3\16\1\121\4\16"+
    "\3\0\14\16\21\0\2\16\2\0\1\16\6\0\1\122"+
    "\7\16\3\0\13\16\1\123\21\0\2\16\2\0\1\16"+
    "\6\0\1\124\7\16\3\0\14\16\21\0\2\16\2\0"+
    "\1\16\6\0\7\16\1\125\3\0\14\16\21\0\2\16"+
    "\2\0\1\16\6\0\6\16\1\126\1\16\3\0\14\16"+
    "\21\0\2\16\2\0\1\16\6\0\10\16\3\0\5\16"+
    "\1\127\6\16\21\0\2\16\2\0\1\16\6\0\3\16"+
    "\1\130\4\16\3\0\14\16\21\0\2\16\2\0\1\16"+
    "\6\0\7\16\1\131\3\0\14\16\21\0\2\16\2\0"+
    "\1\16\6\0\1\16\1\132\6\16\3\0\14\16\21\0"+
    "\2\16\2\0\1\16\6\0\10\16\3\0\5\16\1\133"+
    "\6\16\21\0\2\16\2\0\1\16\6\0\1\134\7\16"+
    "\3\0\14\16\21\0\2\16\2\0\1\16\6\0\5\16"+
    "\1\135\2\16\3\0\14\16\21\0\2\16\41\102\1\136"+
    "\21\102\2\0\1\16\6\0\10\16\3\0\6\16\1\137"+
    "\5\16\21\0\2\16\2\0\2\116\1\0\2\116\1\0"+
    "\1\57\10\116\3\0\2\116\1\0\11\116\2\0\1\116"+
    "\1\0\4\116\2\0\3\116\4\0\2\116\2\0\1\16"+
    "\6\0\3\16\1\140\4\16\3\0\14\16\21\0\2\16"+
    "\2\0\1\16\6\0\6\16\1\141\1\16\3\0\14\16"+
    "\21\0\2\16\2\0\1\16\6\0\4\16\1\142\3\16"+
    "\3\0\14\16\21\0\2\16\2\0\1\16\6\0\2\16"+
    "\1\143\5\16\3\0\14\16\21\0\2\16\2\0\1\16"+
    "\6\0\3\16\1\144\4\16\3\0\14\16\21\0\2\16"+
    "\2\0\1\16\6\0\10\16\3\0\6\16\1\145\5\16"+
    "\21\0\2\16\2\0\1\16\6\0\3\16\1\146\4\16"+
    "\3\0\14\16\21\0\2\16\2\0\1\16\6\0\7\16"+
    "\1\147\3\0\14\16\21\0\2\16\2\0\1\16\6\0"+
    "\5\16\1\131\2\16\3\0\14\16\21\0\2\16\2\0"+
    "\1\16\6\0\4\16\1\150\3\16\3\0\14\16\21\0"+
    "\2\16\2\0\1\16\6\0\10\16\3\0\6\16\1\151"+
    "\5\16\21\0\2\16\2\0\1\16\6\0\6\16\1\134"+
    "\1\16\3\0\14\16\21\0\2\16\2\0\1\16\6\0"+
    "\1\16\1\134\6\16\3\0\14\16\21\0\2\16\2\0"+
    "\1\16\6\0\6\16\1\152\1\16\3\0\14\16\21\0"+
    "\2\16\2\0\1\16\6\0\3\16\1\134\4\16\3\0"+
    "\14\16\21\0\2\16\2\0\1\16\6\0\1\16\1\153"+
    "\6\16\3\0\14\16\21\0\2\16\2\0\1\16\6\0"+
    "\5\16\1\154\2\16\3\0\14\16\21\0\2\16\2\0"+
    "\1\16\6\0\6\16\1\155\1\16\3\0\14\16\21\0"+
    "\2\16\2\0\1\16\6\0\3\16\1\156\4\16\3\0"+
    "\14\16\21\0\2\16\2\0\1\16\6\0\10\16\3\0"+
    "\7\16\1\157\4\16\21\0\2\16\2\0\1\16\6\0"+
    "\3\16\1\160\4\16\3\0\14\16\21\0\2\16\2\0"+
    "\1\16\6\0\10\16\3\0\7\16\1\161\4\16\21\0"+
    "\2\16\2\0\1\16\6\0\1\162\7\16\3\0\14\16"+
    "\21\0\2\16\2\0\1\16\6\0\10\16\3\0\12\16"+
    "\1\134\1\16\21\0\2\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3825];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\3\1\1\11\2\0\21\1\2\0\10\11"+
    "\1\1\3\11\2\1\1\11\1\1\3\0\1\11\13\1"+
    "\3\11\4\1\1\0\6\11\2\1\1\11\1\1\1\11"+
    "\1\0\17\1\1\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private LinkedList<String> extraTypes = new LinkedList<String>();
	
	public void addType(String type) {
		extraTypes.add(type);
	}
	
	private Symbol sym(int type)
	{
		return sym(type, yytext());
	}

	private Symbol sym(int type, Object value)
	{
		return new Symbol(type, yyline, yycolumn, value);
	}

	private void error()
	throws IOException
	{
		throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QLex(java.io.Reader in) {
  	
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public QLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1900) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return sym(EQUALS);
          }
        case 50: break;
        case 26: 
          { return sym(EQUALSCOMPARISON);
          }
        case 51: break;
        case 48: 
          { return sym(RETURN);
          }
        case 52: break;
        case 40: 
          { /* ignore comments*/
          }
        case 53: break;
        case 44: 
          { return sym(FDEF);
          }
        case 54: break;
        case 14: 
          { return sym(SEMICOLON);
          }
        case 55: break;
        case 11: 
          { return sym(PLUS);
          }
        case 56: break;
        case 18: 
          { return sym(BRACKETCLOSE);
          }
        case 57: break;
        case 6: 
          { return sym(LESS);
          }
        case 58: break;
        case 17: 
          { return sym(BRACKETOPEN);
          }
        case 59: break;
        case 39: 
          { return sym(TYPE);
          }
        case 60: break;
        case 20: 
          { return sym(SQUAREBRACKETCLOSE);
          }
        case 61: break;
        case 43: 
          { return sym(ELSE);
          }
        case 62: break;
        case 19: 
          { return sym(SQUAREBRACKETOPEN);
          }
        case 63: break;
        case 36: 
          { yybegin(YYINITIAL);
          }
        case 64: break;
        case 42: 
          { return sym(TDEF);
          }
        case 65: break;
        case 35: 
          { return sym(DO);
          }
        case 66: break;
        case 46: 
          { return sym(BOOL, false);
          }
        case 67: break;
        case 5: 
          { if(extraTypes.indexOf(yytext())==-1)
								return sym(ID);				
							else
								return sym(CUSTOMTYPE);
          }
        case 68: break;
        case 27: 
          { return sym(GREATEREQUALS);
          }
        case 69: break;
        case 34: 
          { return sym(TUPLELEFT);
          }
        case 70: break;
        case 30: 
          { yybegin(COMMENT);
          }
        case 71: break;
        case 25: 
          { return sym(LESSEQUALS);
          }
        case 72: break;
        case 28: 
          { return sym(IF);
          }
        case 73: break;
        case 38: 
          { return sym(CHAR);
          }
        case 74: break;
        case 1: 
          { /* ignore whitespace*/
          }
        case 75: break;
        case 12: 
          { return sym(TIMES);
          }
        case 76: break;
        case 4: 
          { return sym(DOT);
          }
        case 77: break;
        case 15: 
          { return sym(COLON);
          }
        case 78: break;
        case 31: 
          { return sym(OR);
          }
        case 79: break;
        case 29: 
          { return sym(IN);
          }
        case 80: break;
        case 32: 
          { return sym(TUPLERIGHT);
          }
        case 81: break;
        case 9: 
          { return sym(DIVIDE);
          }
        case 82: break;
        case 47: 
          { return sym(WHILE);
          }
        case 83: break;
        case 24: 
          { return sym(STRING);
          }
        case 84: break;
        case 45: 
          { return sym(UNTIL);
          }
        case 85: break;
        case 21: 
          { return sym(CURLYBRACKETOPEN);
          }
        case 86: break;
        case 49: 
          { return sym(REPEAT);
          }
        case 87: break;
        case 37: 
          { return sym(FLOAT);
          }
        case 88: break;
        case 8: 
          { return sym(GREATER);
          }
        case 89: break;
        case 2: 
          { return sym(INT, Integer.parseInt(yytext()));
          }
        case 90: break;
        case 10: 
          { return sym(NOT);
          }
        case 91: break;
        case 33: 
          { return sym(AND);
          }
        case 92: break;
        case 3: 
          { return sym(MINUS);
          }
        case 93: break;
        case 22: 
          { return sym(CURLYBRACKETCLOSE);
          }
        case 94: break;
        case 41: 
          { return sym(BOOL, true);
          }
        case 95: break;
        case 16: 
          { return sym(COMMA);
          }
        case 96: break;
        case 13: 
          { return sym(POWER);
          }
        case 97: break;
        case 23: 
          { 
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(uk.ac.ucl.comp2010.bestgroup.QSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
